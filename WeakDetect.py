#!/usr/bin/env python3
# Enc by Xvenn-03
import base64
exec(__import__('base64').b64decode('ZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgaW5pdCwgU3R5bGUKaW1wb3J0IHB5ZmlnbGV0CmltcG9ydCBvcwppbXBvcnQgcmVxdWVzdHMKI3Byb2dyYW0Kb3Muc3lzdGVtKCJjbGVhciIpCmRlZiBJbnN0YWxhc2koKToKICAgIHByaW50KEZvcmUuUkVELCJVcGRhdGUgU3lzdGVtIixTdHlsZS5SRVNFVF9BTEwpCiAgICBvcy5zeXN0ZW0oImFwdCB1cGRhdGUgLXkiKQogICAgcHJpbnQoRm9yZS5SRUQsIkluc3RhbGwgbGlicmFyaWVzIixTdHlsZS5SRVNFVF9BTEwpCiAgICBvcy5zeXN0ZW0oInBpcCBpbnN0YWxsIGNvbG9yYW1hIikKICAgIG9zLnN5c3RlbSgicGlwIGluc3RhbGwgcmVxdWVzdHMiKQogICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCBweWZpZ2xldCIpCiN3ZWxjb21lIG1lc2Fzc2FnZQpkZWYgZ2V0X3B1YmxpY19pcCgpOgogICAgdHJ5OgogICAgICAgIGlwID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2FwaS5pcGlmeS5vcmciKS50ZXh0CiAgICAgICAgcmV0dXJuIGlwCiAgICBleGNlcHQ6CiAgICAgICAgcmV0dXJuICJUaWRhayBkYXBhdCBtZW5nYW1iaWwgSVAgcHVibGlrLiIKaXAgPSBnZXRfcHVibGljX2lwKCkKCmRlZiBXTSgpOgogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICBpbml0KGF1dG9yZXNldD1UcnVlKQogICAgYmFubmVyID0gcHlmaWdsZXQuZmlnbGV0X2Zvcm1hdCgiV2Vha0RldGVjdCIpCiAgICBwcmludChGb3JlLk1BR0VOVEEgKyBiYW5uZXIpCgpkZWYgV00yKCk6CiAgICBwcmludCgi4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXIikKICAgIHByaW50KCLilZFBdXRob3IgICAgOlx0IFh2ZW5uLTAzICAgICAgICAgICAgICAgICDilZEiKQogICAgcHJpbnQoIuKVkUdpdGh1YiAgICA6XHQgZ2l0aHViLmNvbS9YdmVubi0wMyAgICAgIOKVkSIpCiAgICBwcmludChmIuKVkWlwIHB1YmxpYyA6XHQge2lwfSAgICAgICAgICAgIOKVkSIpCiAgICBwcmludCgi4pWRbWVzYXNzYWdlIDpcdCAiK0ZvcmUuWUVMTE9XKyJbIV0iK1N0eWxlLlJFU0VUX0FMTCsiICAgICAgICAgICAgICAgICAgICAgIOKVkSIpCiAgICBwcmludCgi4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIikKCmRlZiBtZW51KCk6CiAgICBwcmludCgiWzFdIE9wZW4gTWVudSIpCiAgICBwcmludCgiWzJdIEV4aXQgcHJvZ3JhbSIpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIHBpbGloYW5fZGV2aWNlID0gaW5wdXQoIlxuSW5wdXQgb3B0aW9uID4gIikKICAgICAgICBpZiBwaWxpaGFuX2RldmljZSA9PSAiMSI6CiAgICAgICAgICAgIHByaW50KCJcbkVudGVyIGRvd25sb2FkaW5nIG1lbnVcbiIpCiAgICAgICAgICAgIHByaW50KCJbMV0gIitGb3JlLlJFRCsiTm1hcCIpCiAgICAgICAgICAgIHByaW50KCItIE5ldHdvcmsgc2NhbmluZywgUG9ydCBkZXRlY3Rpb24sIFNlcnZpY2UgaWRlbnRpZmljYXRpb24iKQogICAgICAgICAgICBwcmludCgiXG5bMl0gIitGb3JlLlJFRCsiU3FsbWFwIikKICAgICAgICAgICAgcHJpbnQoIi0gRGV0ZWN0aW9uICYgWHBsb2l0IFNxbCBpbmplY3Rpb24iKQogICAgICAgICAgICBwcmludCgiXG5bM10gIitGb3JlLlJFRCsiSm9obiBUaGUgUmlwcGVyIikKICAgICAgICAgICAgcHJpbnQoIi0gQ3JhY2tpbmcgUGFzc3dvcmQiKQogICAgICAgICAgICBwcmludCgiXG5bNF0gIitGb3JlLlJFRCsiTWV0YXNwbG9pdCBGcmFtZXdvcmsiKQogICAgICAgICAgICBwcmludCgiLSBWdWxuZXJhYmlsaXRpZXMgdGVzdGluZywgWHBsb2l0LCBOZXR3b3JrIHBlbmV0cmF0aW9uIikKICAgICAgICAgICAgcHJpbnQoIlxuWzVdICIrRm9yZS5SRUQrIkFpcmNyYWNrLU5nIikKICAgICAgICAgICAgcHJpbnQoIi0gV2lmaSBzZWN1cml0eSIpCiAgICAgICAgICAgIHByaW50KCJcbls2XSAiK0ZvcmUuUkVEKyJIeWRyYSIpCiAgICAgICAgICAgIHByaW50KCItIEJydXRlLWZvcmNlIFNTSCwgRlRQLCBIVFRQQSIpCiAgICAgICAgICAgIHByaW50KCJcbls3XSAiK0ZvcmUuUkVEKyJXaXJlc2hhcmsiKQogICAgICAgICAgICBwcmludCgiLSBOZXR3b3JrIHBhY2tldCBhbmFseXNpcyBmb3IgdHJhZmZpYyBpbnNwZWN0aW9uIikKICAgICAgICAgICAgcHJpbnQoIlxuWzhdICIrRm9yZS5SRUQrIkJydXRlIHN1aXRlIikKICAgICAgICAgICAgcHJpbnQoIi0gd2ViIGFwcGxpY2F0aW9uIHNlY3VyaXR5IHRlc3RpbmcgIikKICAgICAgICAgICAgcHJpbnQoIlxuWzldICIrRm9yZS5SRUQrIk5pa3RvIikKICAgICAgICAgICAgcHJpbnQoIi0gU2Nhbm5lciB2dWxuIikKICAgICAgICAgICAgcHJpbnQoIlxuWzEwXSAiK0ZvcmUuUkVEKyJEaXJiL0RpcmJ1c3RlciIpCiAgICAgICAgICAgIHByaW50KCItIEZpbmQgaGlkZGVuIGRpcmVjdG9yaWVzIG9yIGZpbGVzIG9uIHdlYiBzZXJ2ZXJzIikKICAgICAgICAgICAgcHJpbnQoIlxuWzExXSAiK0ZvcmUuUkVEKyJYU1N0cmlrZSIpCiAgICAgICAgICAgIHByaW50KCItIFhzcyB2dWxuZXJhYmlsaXR5IHRlc3RpbmcgdG9vbCBvbiB3ZWIgYXBwbGljYXRpb25zIikKICAgICAgICAgICAgcHJpbnQoIlxuWzEyXSAiK0ZvcmUuUkVEKyJXUFNla3UiKQogICAgICAgICAgICBwcmludCgiLSBTcGVjaWFsIHRvb2wgdG8gY2hlY2sgdnVsbmVyYWJpbGl0aWVzIGluIFdvcmRQcmVzcyIpCiAgICAgICAgICAgIHByaW50KCJcblsxM10gIitGb3JlLlJFRCsiUmVjb24tTmciKQogICAgICAgICAgICBwcmludCgiLSBPcGVuIHNvdXJjZSBpbmZvcm1hdGlvbiBjb2xsZWN0b3IgZnJhbWV3b3JrIikKICAgICAgICAgICAgcHJpbnQoIlxuWzE0XSAiK0ZvcmUuUkVEKyJEaXJzZWFyY2giKQogICAgICAgICAgICBwcmludCgiLSBCcnV0ZSBmb3JjZSBzZWFyY2ggb2YgZGlyZWN0b3JpZXMgYW5kIGZpbGVzIG9uIGEgd2ViIHNlcnZlciIpCiAgICAgICAgICAgIHByaW50KCJcblsxNSAiK0ZvcmUuUkVEKyJXZnV6el0iKQogICAgICAgICAgICBwcmludCgiLSBGaW5kIGhpZGRlbiBlbmRwb2ludCIpCiAgICAgICAgICAgIHByaW50KCJcblsxNl0gIitGb3JlLlJFRCsiU3VibGlzdDNyIikKICAgICAgICAgICAgcHJpbnQoIi0gQ29sbGVjdCBzdWJkb21haW5zIGF1dG9tYXRpY2FsbHkiKQogICAgICAgICAgICBwcmludCgiXG5bMTddICIrRm9yZS5SRUQrIldob2lzIikKICAgICAgICAgICAgcHJpbnQoIi0gR2V0IGluZm9ybWF0aW9uIGFib3V0IGRvbWFpbiIpCiAgICAgICAgICAgIHByaW50KCJcblsxOF0gIitGb3JlLlJFRCsiQ2xvdWRmbGFyZSBCeXBhc3MiKQogICAgICAgICAgICBwcmludCgiLSBCeXBhc3MgY2xvdWRmbGFyZSBpbiBzZWFyY2ggb2Ygb3JpZ2luYWwgc2VydmVyIGlwIikKICAgICAgICAgICAgcGlsaWhhbl90b29sID0gaW50KGlucHV0KCJcbkVudGVyIG9wdGlvbiA+ICIpKQogICAgICAgICAgICAjY2xvdWRmbGFyZSBieXBhc3MKICAgICAgICAgICAgaWYgcGlsaWhhbl90b29sID09IDE4OgogICAgICAgICAgICAgICAgcHJpbnQoIlxuQ2xvdWRmbGFyZSBCeXBhc3MgbWVudXUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBob3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzE4ID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgIGlmIHBpbGloYW5fMTggPT0gMToKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vQW5uaWhpbGF0ZXJ6L2NmLWJ5cGFzcy5naXQiKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fMTggPT0gMjoKICAgICAgICAgICAgICAgICAgICBwcmludCgnJycK8J+SoSBXaGF0IGlzIGNmLWJ5cGFzcz8KYGNmLWJ5cGFzc2AgaXMgYSB0b29sIHRvIGJ5cGFzcyBDbG91ZGZsYXJlIHByb3RlY3Rpb24gKEREb1MgbWl0aWdhdGlvbiwgV0FGLCBhbmQgQ0FQVENIQSkgd2hlbiB0ZXN0aW5nIG9yIHNjcmFwaW5nIHdlYnNpdGVzLiAgCgrwn5ugIEJhc2ljIFJlcXVpcmVtZW50cyAKQmVmb3JlIHVzaW5nIGBjZi1ieXBhc3NgOiAgCjEuIEluc3RhbGwgUHl0aG9uIDMuICAKMi4gQ2xvbmUgdGhlIHRvb2wgZnJvbSBHaXRIdWI6ICAKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9Bbm5paGlsYXRlcnovY2YtYnlwYXNzLmdpdAozLiBOYXZpZ2F0ZSB0byB0aGUgZm9sZGVyOiAgCmNkIGNmLWJ5cGFzcwo0LiBJbnN0YWxsIHJlcXVpcmVkIGRlcGVuZGVuY2llczogIApwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0Cgrwn5OMIEJhc2ljIFVzYWdlIAoxLiBDaGVjayBpZiBhIHdlYnNpdGUgaXMgcHJvdGVjdGVkIGJ5IENsb3VkZmxhcmUgIApSdW46ICAKcHl0aG9uIGNmLWJ5cGFzcy5weSAtdSAiaHR0cHM6Ly9leGFtcGxlLmNvbSIKLSBgLXVgID0gVGFyZ2V0IFVSTC4gIAoKMi4gQnlwYXNzIENsb3VkZmxhcmUgYW5kIGZldGNoIHBhZ2UgY29udGVudCAKcHl0aG9uIGNmLWJ5cGFzcy5weSAtdSAiaHR0cHM6Ly9leGFtcGxlLmNvbSIgLS1nZXQKLSBgLS1nZXRgID0gRmV0Y2hlcyB0aGUgcGFnZSBjb250ZW50IGFmdGVyIGJ5cGFzc2luZyBDbG91ZGZsYXJlLiAgCgozLiBTYXZlIHRoZSByZXN1bHQgdG8gYSBmaWxlCnB5dGhvbiBjZi1ieXBhc3MucHkgLXUgImh0dHBzOi8vZXhhbXBsZS5jb20iIC0tZ2V0IC1vIG91dHB1dC5odG1sCi0gYC1vYCA9IFNhdmVzIHRoZSBvdXRwdXQgdG8gYSBmaWxlIChlLmcuLCBgb3V0cHV0Lmh0bWxgKS4gIAoKNC4gVXNlIGEgY3VzdG9tIHVzZXItYWdlbnQgKG9wdGlvbmFsKSAKcHl0aG9uIGNmLWJ5cGFzcy5weSAtdSAiaHR0cHM6Ly9leGFtcGxlLmNvbSIgLS1nZXQgLS11c2VyLWFnZW50ICJNb3ppbGxhLzUuMCIKLSBgLS11c2VyLWFnZW50YCA9IENoYW5nZXMgdGhlIGJyb3dzZXIgaWRlbnRpdHkgdG8gYXZvaWQgZGV0ZWN0aW9uLiAgCgrimqDvuI8gV2FybmluZzoKLSBVc2UgdGhpcyB0b29sIG9ubHkgb24gd2Vic2l0ZXMgeW91IG93biBvciBoYXZlIHBlcm1pc3Npb24gdG8gdGVzdC4gIAotIFVuYXV0aG9yaXplZCBieXBhc3Npbmcgb2YgQ2xvdWRmbGFyZSBwcm90ZWN0aW9ucyBtYXkgYmUgaWxsZWdhbC4gIAoKVGhpcyBndWlkZSBjb3ZlcnMgdGhlIGJhc2ljcy4gRm9yIGFkdmFuY2VkIG9wdGlvbnMsIGNoZWNrIHRoZSB0b29s4oCZcyBgUkVBRE1FLm1kYCBvciBydW46ICAKcHl0aG9uIGNmLWJ5cGFzcy5weSAtLWhlbHAKJycnKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgI1dob2lzCiAgICAgICAgICAgIGVsaWYgcGlsaWhhbl90b29sID09IDE3OgogICAgICAgICAgICAgICAgcHJpbnQoIlxuV2hvaXMgbWVudSIpCiAgICAgICAgICAgICAgICBwcmludCgiWzFdIEluc3RhbGxhdGlvbiIpCiAgICAgICAgICAgICAgICBwcmludCgiWzJdIGhvdyB0byB1c2U/IikKICAgICAgICAgICAgICAgIHBpbGloYW5fMTcgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgaWYgcGlsaWhhbl8xNyA9PSAxOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiYXB0IGluc3RhbGwgd2hvaXMiKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fMTcgPT0gMjoKICAgICAgICAgICAgICAgICAgICBwcmludCgnJycK8J+SoSBXaGF0IGlzIFdIT0lTPyAgCldIT0lTIGlzIGEgdG9vbCB0byBsb29rIHVwIGRvbWFpbiBvciBJUCBhZGRyZXNzIGluZm9ybWF0aW9uLCBsaWtlIHdobyBvd25zIGEgd2Vic2l0ZSwgd2hlbiBpdCB3YXMgcmVnaXN0ZXJlZCwgYW5kIGl0cyBleHBpcmF0aW9uIGRhdGUuICAKCvCfm6AgQmFzaWMgUmVxdWlyZW1lbnRzICAKQmVmb3JlIHVzaW5nIFdIT0lTOiAgCi0gSW5zdGFsbCBXSE9JUyAoaWYgbm90IHByZS1pbnN0YWxsZWQpLiAgCiAgLSBMaW51eC9tYWNPUzogVXN1YWxseSBidWlsdC1pbiAocnVuIGB3aG9pc2AgaW4gdGVybWluYWwpLiAgCiAgLSBXaW5kb3dzOiBEb3dubG9hZCBmcm9tIFtTeXNpbnRlcm5hbHNdKGh0dHBzOi8vbGVhcm4ubWljcm9zb2Z0LmNvbS9lbi11cy9zeXNpbnRlcm5hbHMvKSBvciB1c2Ugb25saW5lIFdIT0lTIHRvb2xzLiAgCi0gS25vdyBhIGRvbWFpbiBuYW1lIChlLmcuLCBgZXhhbXBsZS5jb21gKSBvciBJUCBhZGRyZXNzLiAgCgrwn5OMIEJhc2ljIENvbW1hbmRzICAKCjEuIExvb2sgdXAgZG9tYWluIGluZm9ybWF0aW9uICAKd2hvaXMgZXhhbXBsZS5jb20KLSBTaG93cyB0aGUgZG9tYWlu4oCZcyByZWdpc3RyYXIsIG93bmVyLCBjcmVhdGlvbi9leHBpcnkgZGF0ZXMsIGFuZCBjb250YWN0IGluZm8uICAKCjIuIExvb2sgdXAgSVAgYWRkcmVzcyBpbmZvcm1hdGlvbiAgCndob2lzIDguOC44LjgKLSBEaXNwbGF5cyB0aGUgSVDigJlzIG93bmVyIChlLmcuLCBHb29nbGXigJlzIEROUyBzZXJ2ZXIpLiAgCgozLiBDaGVjayBkb21haW4gYXZhaWxhYmlsaXR5ICAKd2hvaXMgbmV3ZG9tYWluMTIzLmNvbQotIElmIHRoZSBkb21haW4gaXMgKipub3QgcmVnaXN0ZXJlZCoqLCB5b3XigJlsbCBzZWUgIk5vIG1hdGNoIGZvciBkb21haW4iLiAgCgo0LiBMaW1pdCBvdXRwdXQgKGZvciBmYXN0ZXIgcmVzdWx0cykgIAp3aG9pcyAtSCBleGFtcGxlLmNvbQotIGAtSGAgPSBIaWRlIGxlZ2FsIGRpc2NsYWltZXJzIChzaG9ydGVyIG91dHB1dCkuICAKCuKaoO+4jyBXYXJuaW5nOiAgCi0gV0hPSVMgZGF0YSBtYXkgYmUgcHJpdmF0ZSAoZHVlIHRvIEdEUFIvcmVnaXN0cmFyIHByaXZhY3kpLiAgCi0gVXNlIFdIT0lTIGV0aGljYWxseeKAlGRvbuKAmXQgc3BhbSBkb21haW4gb3duZXJzLiAgCgpFeGFtcGxlIE91dHB1dDogIAokIHdob2lzIGdvb2dsZS5jb20KCkRvbWFpbiBOYW1lOiBHT09HTEUuQ09NICAKUmVnaXN0cnkgRG9tYWluIElEOiAyMTM4NTE0X0RPTUFJTl9DT00tVlJTTiAgClJlZ2lzdHJhcjogTWFya01vbml0b3IgSW5jLiAgCkNyZWF0aW9uIERhdGU6IDE5OTctMDktMTUgIApFeHBpcmF0aW9uIERhdGU6IDIwMjgtMDktMTQgIApSZWdpc3RyYW50IEVtYWlsOiBhYnVzZWNvbXBsYWludHNAbWFya21vbml0b3IuY29tICAKTmFtZSBTZXJ2ZXI6IG5zMS5nb29nbGUuY29tICAKJycnKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgI1N1Ymxpc3QzcgogICAgICAgICAgICBlbGlmIHBpbGloYW5fdG9vbCA9PSAxNjoKICAgICAgICAgICAgICAgIHByaW50KCJcblN1Ymxpc3QzciBtZW51IikKICAgICAgICAgICAgICAgIHByaW50KCJbMV0gSW5zdGFsbGF0aW9uIikKICAgICAgICAgICAgICAgIHByaW50KCJbMl0gSG93IHRvIHVzZT8iKQogICAgICAgICAgICAgICAgcGlsaWhhbl8xNiA9IGludChpbnB1dCgiSW5wdXQgb3B0aW9uID4gIikpCiAgICAgICAgICAgICAgICBpZiBwaWxpaGFuXzE2ID09IDE6CiAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCBzdWJsaXN0M3IiKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fMTYgPT0gMjoKICAgICAgICAgICAgICAgICAgICBwcmludCgnJycK8J+SoSBXaGF0IGlzIFN1Ymxpc3Qzcj8KU3VibGlzdDNyIGlzIGEgdG9vbCB0byBmaW5kIHN1YmRvbWFpbnMgb2YgYSB3ZWJzaXRlLCB3aGljaCBoZWxwcyBpbiBzZWN1cml0eSB0ZXN0aW5nIGFuZCByZWNvbm5haXNzYW5jZS4gIAoK8J+boCBCYXNpYyBSZXF1aXJlbWVudHMKQmVmb3JlIHVzaW5nIFN1Ymxpc3QzcjogIAotIEluc3RhbGwgUHl0aG9uICgyLjcgb3IgMy54KS4gIAotIEluc3RhbGwgU3VibGlzdDNyIChgcGlwIGluc3RhbGwgc3VibGlzdDNyYCkuICAKLSBLbm93IHRoZSB0YXJnZXQgZG9tYWluIChlLmcuLCBgZXhhbXBsZS5jb21gKS4gIAoK8J+TjCBCYXNpYyBDb21tYW5kcyAgCgoxLiBGaW5kIHN1YmRvbWFpbnMgb2YgYSB3ZWJzaXRlICAKc3VibGlzdDNyIC1kIGV4YW1wbGUuY29tCmAtZGAgPSB0aGUgdGFyZ2V0IGRvbWFpbi4gIAoKMi4gU2F2ZSByZXN1bHRzIHRvIGEgZmlsZSAKc3VibGlzdDNyIC1kIGV4YW1wbGUuY29tIC1vIHN1YmRvbWFpbnMudHh0CmAtb2AgPSBzYXZlIG91dHB1dCB0byBhIGZpbGUuICAKCjMuIFVzZSBzcGVjaWZpYyBzZWFyY2ggZW5naW5lcyAobGlrZSBHb29nbGUsIEJpbmcpIApzdWJsaXN0M3IgLWQgZXhhbXBsZS5jb20gLWUgZ29vZ2xlLGJpbmcKYC1lYCA9IHNwZWNpZnkgc2VhcmNoIGVuZ2luZXMuICAKCjQuIEVuYWJsZSBicnV0ZS1mb3JjZSBtb2RlIChmb3IgbW9yZSBzdWJkb21haW5zKQpzdWJsaXN0M3IgLWQgZXhhbXBsZS5jb20gLWIKYC1iYCA9IGJydXRlLWZvcmNlIHN1YmRvbWFpbnMgdXNpbmcgYSB3b3JkbGlzdC4gIAoKNS4gVXNlIGEgY3VzdG9tIHBvcnQgc2Nhbgogc3VibGlzdDNyIC1kIGV4YW1wbGUuY29tIC1wIDgwLDQ0Myw4MDgwCmAtcGAgPSBzY2FuIHN1YmRvbWFpbnMgb24gc3BlY2lmaWMgcG9ydHMuICAKCuKaoO+4jyBXYXJuaW5nOgotIFVzZSBTdWJsaXN0M3Igb25seSBvbiB3ZWJzaXRlcyB5b3Ugb3duIG9yIGhhdmUgcGVybWlzc2lvbiB0byB0ZXN0LiAgCi0gVW5hdXRob3JpemVkIHNjYW5uaW5nIG1heSBiZSBpbGxlZ2FsLiAgCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICNXZnV6egogICAgICAgICAgICBlbGlmIHBpbGloYW5fdG9vbCA9PSAxNToKICAgICAgICAgICAgICAgIHByaW50KCJcbldmdXp6IG1lbnUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzE1ID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgIGlmIHBpbGloYW5fMTUgPT0gMToKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20veG1lbmRlei93ZnV6ei5naXQiKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fMTUgPT0gMjoKICAgICAgICAgICAgICAgICAgICBwcmludCgnJycK8J+TpSBBbHRlcm5hdGl2ZSBJbnN0YWxsYXRpb24gTWV0aG9kcyAgCjEuIEluc3RhbGwgd2l0aCBQeXRob24gUElQICAKSWYgeW91IGhhdmUgUHl0aG9uIGluc3RhbGxlZDogIApwaXAgaW5zdGFsbCB3ZnV6egpOb3RlOiBVc2UgYHBpcDNgIGlmIGBwaXBgIHBvaW50cyB0byBQeXRob24gMi54LiAgCgoyLiBDbG9uZSBmcm9tIEdpdEh1YiAoTWFudWFsIEJ1aWxkKSAgCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20veG1lbmRlei93ZnV6ei5naXQKY2Qgd2Z1enoKcHl0aG9uIHNldHVwLnB5IGluc3RhbGwgICMgb3IgInB5dGhvbjMgc2V0dXAucHkgaW5zdGFsbCIKICAgICAgICAgICAgICAgICAgICAgICAgICBgYGAgIAozLiBVc2luZyBEb2NrZXIgClB1bGwgdGhlIG9mZmljaWFsIGltYWdlOiAgCmRvY2tlciBwdWxsIHhtZW5kZXovd2Z1enoKUnVuIFdGdXp6IGluIGEgY29udGFpbmVyOiAgCmRvY2tlciBydW4gLWl0IHhtZW5kZXovd2Z1enogd2Z1enogLS1oZWxwCgo0LiAqKkRvd25sb2FkIFByZWNvbXBpbGVkIEJpbmFyaWVzIApDaGVjayB0aGUgW1JlbGVhc2VzIFBhZ2VdKGh0dHBzOi8vZ2l0aHViLmNvbS94bWVuZGV6L3dmdXp6L3JlbGVhc2VzKSBmb3Igc3RhbmRhbG9uZSBiaW5hcmllcy4gIAoK8J+UpyBQb3N0LUluc3RhbGwgQ2hlY2sgIApWZXJpZnkgV0Z1enogd29ya3M6ICAKd2Z1enogLS12ZXJzaW9uCgrwn5OMIE5vdGVzICAKLSBEZXBlbmRlbmNpZXM6IFdGdXp6IHJlcXVpcmVzIFB5dGhvbiAzLjYrLiAgCi0gV29yZGxpc3RzOiBJZiBtaXNzaW5nLCBkb3dubG9hZCBjb21tb24gd29yZGxpc3RzIChlLmcuLCBgZGlyYmAsIGByb2NreW91LnR4dGApIHRvIGAvdXNyL3NoYXJlL3dvcmRsaXN0cy9gLiAgCi0gRXJyb3JzPyBJbnN0YWxsIG1pc3NpbmcgZGVwZW5kZW5jaWVzIChlLmcuLCBgcHl0aG9uMy1kZXZgKS4gIAoK4pqhIFF1aWNrIEV4YW1wbGUKVGVzdCBhIFVSTCBmb3IgZGlyZWN0b3JpZXM6ICAKd2Z1enogLWMgLXogZmlsZSx3b3JkbGlzdC50eHQgLS1oYyA0MDQgaHR0cDovL2V4YW1wbGUuY29tL0ZVWloKTGV0IG1lIGtub3cgaWYgeW91IG5lZWQgaGVscCB0cm91Ymxlc2hvb3RpbmchIPCfm6DvuI8KICAgICAgICAgICAgICAgICAgICAgICAgICAnJycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgI0RpcnNlYXJjaAogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgIGVsaWYgcGlsaWhhbl90b29sID09IDE0OgogICAgICAgICAgICAgICAgcHJpbnQoIlxuRGlyc2VhcmNoIG1lbnUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzE0ID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgIGlmIHBpbGloYW5fMTQgPT0gIDE6CiAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL21hdXJvc29yaWEvZGlyc2VhcmNoLmdpdCIpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsaWYgcGlsaWhhbl8xNCA9PSAyOgogICAgICAgICAgICAgICAgICAgIHByaW50KCcnJwrwn5KhIFdoYXQgaXMgRGlyc2VhcmNoPwpEaXJzZWFyY2ggaXMgYSBwb3dlcmZ1bCB0b29sIHRvIHNjYW4gd2Vic2l0ZXMgZm9yIGhpZGRlbiBkaXJlY3RvcmllcyBhbmQgZmlsZXMgKGxpa2UgYWRtaW4gcGFuZWxzLCBiYWNrdXBzLCBvciBzZW5zaXRpdmUgZmlsZXMpLiAgCgrwn5ugIEJhc2ljIFJlcXVpcmVtZW50cyoKQmVmb3JlIHVzaW5nIERpcnNlYXJjaDogIAoxLiBJbnN0YWxsIFB5dGhvbiAocmVxdWlyZWQgdG8gcnVuIERpcnNlYXJjaCkuICAKMi4gRG93bmxvYWQgRGlyc2VhcmNoIGZyb20gR2l0SHViOiAgCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vbWF1cm9zb3JpYS9kaXJzZWFyY2guZ2l0CjMuIE5hdmlnYXRlIHRvIHRoZSBEaXJzZWFyY2ggZm9sZGVyOiAgCmNkIGRpcnNlYXJjaAoK8J+TjCBCYXNpYyBDb21tYW5kcyAKCjEuIFNjYW4gYSB3ZWJzaXRlIGZvciBoaWRkZW4gZGlyZWN0b3JpZXMvZmlsZXMgIApweXRob24zIGRpcnNlYXJjaC5weSAtdSBodHRwOi8vZXhhbXBsZS5jb20gCmAtdWAgPSB0YXJnZXQgVVJMLiAgCgoyLiBVc2UgYSBjdXN0b20gd29yZGxpc3QgKGxpc3Qgb2YgcGF0aHMgdG8gY2hlY2spIApweXRob24zIGRpcnNlYXJjaC5weSAtdSBodHRwOi8vZXhhbXBsZS5jb20gLXcgL3BhdGgvdG8vd29yZGxpc3QudHh0CmAtd2AgPSBzcGVjaWZ5IGEgd29yZGxpc3QgKGRlZmF1bHQgaXMgYnVpbHQtaW4pLiAgCgozLiBTY2FuIHdpdGggZXh0ZW5zaW9ucyAoZS5nLiwgUEhQLCBIVE1MKSAKcHl0aG9uMyBkaXJzZWFyY2gucHkgLXUgaHR0cDovL2V4YW1wbGUuY29tIC1lIHBocCxodG1sCmAtZWAgPSBmaWxlIGV4dGVuc2lvbnMgdG8gY2hlY2suICAKCjQuIExpbWl0IHRocmVhZHMgKHRvIGF2b2lkIG92ZXJsb2FkaW5nIHRoZSBzZXJ2ZXIpICAKcHl0aG9uMyBkaXJzZWFyY2gucHkgLXUgaHR0cDovL2V4YW1wbGUuY29tIC10IDIwCmAtdGAgPSBudW1iZXIgb2YgdGhyZWFkcyAoZGVmYXVsdDogMjUpLiAgCgo1LiBTYXZlIHJlc3VsdHMgdG8gYSBmaWxlIApweXRob24zIGRpcnNlYXJjaC5weSAtdSBodHRwOi8vZXhhbXBsZS5jb20gLW8gcmVwb3J0LnR4dApgLW9gID0gb3V0cHV0IGZpbGUuICAKCuKaoO+4jyBXYXJuaW5nOgotIFVzZSBEaXJzZWFyY2ggb25seSBvbiB3ZWJzaXRlcyB5b3Ugb3duIG9yIGhhdmUgcGVybWlzc2lvbiB0byB0ZXN0LiAgCi0gVW5hdXRob3JpemVkIHNjYW5uaW5nIGlzIGlsbGVnYWwgYW5kIHVuZXRoaWNhbC4KJycnKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgI1JlY29uLU5nCiAgICAgICAgICAgIGVsaWYgcGlsaWhhbl90b29sID09IDEzOgogICAgICAgICAgICAgICAgcHJpbnQoIlJlY29uLU5nIG1lbnUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzQgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgaWYgcGlsaWhhbl80ID09IDE6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNob29zZSBkZXZpY2UiKQogICAgICAgICAgICAgICAgICAgIHByaW50KCJbMV0gQW5kcm9pZCAoVGVybXV4KSIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBMaW51eCIpCiAgICAgICAgICAgICAgICAgICAgb3MgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgICAgIGlmIG9zID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9sYW5tYXN0ZXI1My9yZWNvbi1uZy5naXQiKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGVsaWYgb3MgPT0gMjoKICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2xhbm1hc3RlcjUzL3JlY29uLW5nLmdpdCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fNCA9PSAyOgogICAgICAgICAgICAgICAgICAgIHByaW50KCcnJwrwn5KhIFdoYXQgaXMgUmVjb24tbmc/IApSZWNvbi1uZyBpcyBhIGZ1bGwtZmVhdHVyZWQgcmVjb25uYWlzc2FuY2UgdG9vbCBmb3IgZ2F0aGVyaW5nIGluZm9ybWF0aW9uIGFib3V0IHRhcmdldHMgKHdlYnNpdGVzLCBkb21haW5zLCBvciBuZXR3b3JrcykuIEl0IGF1dG9tYXRlcyBPU0lOVCAoT3Blbi1Tb3VyY2UgSW50ZWxsaWdlbmNlKSB0YXNrcyBsaWtlIGRvbWFpbiBsb29rdXAsIHN1YmRvbWFpbiBkaXNjb3ZlcnksIGFuZCBkYXRhIGxlYWtzLgoK8J+boCBCYXNpYyBSZXF1aXJlbWVudHMgIApCZWZvcmUgdXNpbmcgUmVjb24tbmc6ICAKMS4gSW5zdGFsbCBQeXRob24gKExpbnV4L1Rlcm11eCkuICAKMi4gSW5zdGFsbCBSZWNvbi1uZy4gIAozLiBIYXZlIGEgdGFyZ2V0IGRvbWFpbiAoZS5nLiwgYGV4YW1wbGUuY29tYCkuICAKCvCfk4wgSW5zdGFsbGF0aW9uCkxpbnV4IChLYWxpL1VidW50dSkKYGBgYmFzaAojIEluc3RhbGwgZGVwZW5kZW5jaWVzCnN1ZG8gYXB0IHVwZGF0ZSAmJiBzdWRvIGFwdCBpbnN0YWxsIC15IHB5dGhvbjMgZ2l0CgojIENsb25lIFJlY29uLW5nCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vbGFubWFzdGVyNTMvcmVjb24tbmcuZ2l0CgojIE5hdmlnYXRlIHRvIHRoZSBmb2xkZXIKY2QgcmVjb24tbmcKCiMgSW5zdGFsbCByZXF1aXJlbWVudHMKcGlwMyBpbnN0YWxsIC1yIFJFUVVJUkVNRU5UUwoKIyBSdW4gUmVjb24tbmcKcHl0aG9uMyByZWNvbi1uZy5weQoKVGVybXV4IChBbmRyb2lkKSAKYGBgYmFzaAojIFVwZGF0ZSAmIGluc3RhbGwgUHl0aG9uCnBrZyB1cGRhdGUgJiYgcGtnIGluc3RhbGwgLXkgcHl0aG9uIGdpdAoKIyBDbG9uZSBSZWNvbi1uZwpnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2xhbm1hc3RlcjUzL3JlY29uLW5nLmdpdAoKIyBOYXZpZ2F0ZSB0byB0aGUgZm9sZGVyCmNkIHJlY29uLW5nCgojIEluc3RhbGwgcmVxdWlyZW1lbnRzCnBpcCBpbnN0YWxsIC1yIFJFUVVJUkVNRU5UUwoKIyBSdW4gUmVjb24tbmcKcHl0aG9uIHJlY29uLW5nLnB5Cgrwn5OMIEJhc2ljIFVzYWdlCjEuIFN0YXJ0IFJlY29uLW5nICYgTG9hZCBhIFdvcmtzcGFjZQojIFN0YXJ0IHRoZSB0b29sCnB5dGhvbjMgcmVjb24tbmcucHkKCiMgQ3JlYXRlIGEgd29ya3NwYWNlIChyZXBsYWNlICd0YXJnZXQxJykKd29ya3NwYWNlcyBjcmVhdGUgdGFyZ2V0MQoKIyBMaXN0IHdvcmtzcGFjZXMKd29ya3NwYWNlcyBsaXN0CgoyLiBBZGQgYSBUYXJnZXQgRG9tYWluCiMgQWRkIGEgZG9tYWluIChlLmcuLCBleGFtcGxlLmNvbSkKYWRkIGRvbWFpbnMgZXhhbXBsZS5jb20KCjMuIFVzZSBNb2R1bGVzIGZvciBSZWNvbm5haXNzYW5jZQpSZWNvbi1uZyBoYXMgYnVpbHQtaW4gbW9kdWxlcyBmb3IgZGlmZmVyZW50IHRhc2tzLiAgCgpGaW5kIFN1YmRvbWFpbnMKIyBMb2FkIHRoZSBzdWJkb21haW4gZGlzY292ZXJ5IG1vZHVsZQp1c2UgcmVjb24vZG9tYWlucy1ob3N0cy9icnV0ZV9ob3N0cwoKIyBTZXQgb3B0aW9ucwpvcHRpb25zIHNldCBTT1VSQ0UgZXhhbXBsZS5jb20KCiMgUnVuIHRoZSBtb2R1bGUKcnVuCgpGaW5kIEVtYWlscyAoSGFydmVzdGluZykgIAojIExvYWQgdGhlIGVtYWlsIGhhcnZlc3RlciBtb2R1bGUKdXNlIHJlY29uL2NvbnRhY3RzLWhvc3RzL2hhcnZlc3RlcgoKIyBTZXQgb3B0aW9ucwpvcHRpb25zIHNldCBTT1VSQ0UgZXhhbXBsZS5jb20KCiMgUnVuCnJ1bgoKU2NhbiBmb3IgVnVsbmVyYWJsZSBVUkxzIAojIExvYWQgYSB2dWxuZXJhYmlsaXR5IHNjYW5uZXIKdXNlIHJlcG9ydGluZy92dWxuZXJhYmlsaXRpZXMKCiMgU2V0IG9wdGlvbnMgKGlmIG5lZWRlZCkKb3B0aW9ucyBzZXQgU09VUkNFIGV4YW1wbGUuY29tCgojIEV4ZWN1dGUKcnVuCgo0LiBWaWV3IFJlc3VsdHMgCiMgU2hvdyBkaXNjb3ZlcmVkIGhvc3RzCnNob3cgaG9zdHMKCiMgU2hvdyBlbWFpbHMKc2hvdyBjb250YWN0cwoKIyBFeHBvcnQgZGF0YSB0byBhIGZpbGUKZXhwb3J0IC9wYXRoL3RvL3NhdmUvcmVzdWx0cy5qc29uCgo1LiBFeGl0CiMgRXhpdCBSZWNvbi1uZwpleGl0CgrimqDvuI8gV2FybmluZyAgCi0gVXNlIFJlY29uLW5nICoqb25seSBvbiB0YXJnZXRzIHlvdSBvd24qKiBvciBoYXZlIHBlcm1pc3Npb24gdG8gdGVzdC4gIAotIFVuYXV0aG9yaXplZCByZWNvbm5haXNzYW5jZSBtYXkgYmUgKippbGxlZ2FsKiouICAKCvCflI0gRXhhbXBsZSBXb3JrZmxvdyAgCjEuIGB3b3Jrc3BhY2VzIGNyZWF0ZSB0ZXN0YCAgCjIuIGBhZGQgZG9tYWlucyBleGFtcGxlLmNvbWAgIAozLiBgdXNlIHJlY29uL2RvbWFpbnMtaG9zdHMvYnJ1dGVfaG9zdHNgICAKNC4gYG9wdGlvbnMgc2V0IFNPVVJDRSBleGFtcGxlLmNvbWAgIAo1LiBgcnVuYCAgCjYuIGBzaG93IGhvc3RzYCAgClRoaXMgd2lsbCBsaXN0IHN1YmRvbWFpbnMgbGlrZSBgYWRtaW4uZXhhbXBsZS5jb21gLCBgbWFpbC5leGFtcGxlLmNvbWAsIGV0Yy4gIAonJycpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAjV1BTZWt1CiAgICAgICAgICAgIGVsaWYgcGlsaWhhbl90b29sID09IDEyOgogICAgICAgICAgICAgICAgcHJpbnQoIlxuV1BTZWt1IG1lbnUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzQgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgaWYgcGlsaWhhbl80ID09IDE6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNob29zZSBkZXZpY2UiKQogICAgICAgICAgICAgICAgICAgIHByaW50KCJbMV0gQW5kcm9pZCAoVGVybXV4KSIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBMaW51eCIpCiAgICAgICAgICAgICAgICAgICAgb3MgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgICAgIGlmIG9zID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9tNGxsMGsvV1BTZWt1LmdpdCIpICAKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBlbGlmIG9zID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9tNGxsMGsvV1BTZWt1LmdpdCIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fNCA9PSAyOgogICAgICAgICAgICAgICAgICAgIHByaW50KCcnJwrwn5KhIFdoYXQgaXMgV1BTZWt1PwpXUFNla3UgaXMgYSB0b29sIHRvIHNjYW4gV29yZFByZXNzIHdlYnNpdGVzIGZvciBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMgbGlrZSB3ZWFrIHBhc3N3b3Jkcywgb3V0ZGF0ZWQgcGx1Z2lucywgYW5kIG1pc2NvbmZpZ3VyYXRpb25zLiAgCgog8J+boCBCYXNpYyBSZXF1aXJlbWVudHMKQmVmb3JlIHVzaW5nIFdQU2VrdTogIAoxLiBJbnN0YWxsIFB5dGhvbiBhbmQgR2l0LiAgCjIuIEtub3cgdGhlIHRhcmdldCBXb3JkUHJlc3Mgc2l0ZSBVUkwuICAKCvCfk6UgSW5zdGFsbGF0aW9uCk9uIExpbnV4IChLYWxpL1VidW50dS9EZWJpYW4pIAoxLiBPcGVuIGEgdGVybWluYWwgYW5kIHJ1bjogIApnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL200bGwway9XUFNla3UuZ2l0CmNkIFdQU2VrdQpwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0CgpPbiBUZXJtdXggKEFuZHJvaWQpICAKMS4gUnVuIHRoZXNlIGNvbW1hbmRzOiAgCnBrZyBpbnN0YWxsIHB5dGhvbiBnaXQgLXkKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9tNGxsMGsvV1BTZWt1LmdpdApjZCBXUFNla3UKcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dAogICAK8J+TjCBCYXNpYyBVc2FnZSAKMS4gU2NhbiBhIFdvcmRQcmVzcyBTaXRlIApweXRob24gd3BzZWt1LnB5IC0tdGFyZ2V0IGh0dHA6Ly9leGFtcGxlLmNvbQotIGAtLXRhcmdldGAgPSBVUkwgb2YgdGhlIFdvcmRQcmVzcyBzaXRlIHRvIHNjYW4uICAKCjIuIFNjYW4gd2l0aCBBZ2dyZXNzaXZlIERldGVjdGlvbiAKcHl0aG9uIHdwc2VrdS5weSAtLXRhcmdldCBodHRwOi8vZXhhbXBsZS5jb20gLS1hZ2dyZXNzaXZlCi0gYC0tYWdncmVzc2l2ZWAgPSBkZWVwZXIgc2NhbiAoY2hlY2tzIHBsdWdpbnMsIHVzZXJzLCBhbmQgdmVyc2lvbnMpLiAgCgozLiBFbnVtZXJhdGUgV29yZFByZXNzIFVzZXJzICAKcHl0aG9uIHdwc2VrdS5weSAtLXRhcmdldCBodHRwOi8vZXhhbXBsZS5jb20gLS1lbnVtZXJhdGUgdQotIGAtLWVudW1lcmF0ZSB1YCA9IGxpc3RzIHJlZ2lzdGVyZWQgdXNlcm5hbWVzLiAgCgo0LiBTY2FuIGZvciBWdWxuZXJhYmxlIFBsdWdpbnMgIApweXRob24gd3BzZWt1LnB5IC0tdGFyZ2V0IGh0dHA6Ly9leGFtcGxlLmNvbSAtLWVudW1lcmF0ZSBwCi0gYC0tZW51bWVyYXRlIHBgID0gY2hlY2tzIGluc3RhbGxlZCBwbHVnaW5zIGZvciBrbm93biB2dWxuZXJhYmlsaXRpZXMuICAKCuKaoO+4jyBXYXJuaW5nOgotIFVzZSBXUFNla3Ugb25seSBvbiB3ZWJzaXRlcyB5b3Ugb3duIG9yIGhhdmUgcGVybWlzc2lvbiB0byB0ZXN0LiAgCi0gVW5hdXRob3JpemVkIHNjYW5uaW5nIGlzICoqaWxsZWdhbCoqIGFuZCBjYW4gbGVhZCB0byBsZWdhbCBjb25zZXF1ZW5jZXMuICAKJycnKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgI1hTU3RyaWtlCiAgICAgICAgICAgIGVsaWYgcGlsaWhhbl90b29sID09IDExOgogICAgICAgICAgICAgICAgcHJpbnQoIlxuWFNTdHJpa2UgbWVudSIpCiAgICAgICAgICAgICAgICBwcmludCgiWzFdIEluc3RhbGxhdGlvbiIpCiAgICAgICAgICAgICAgICBwcmludCgiWzJdIEhvdyB0byB1c2U/IikKICAgICAgICAgICAgICAgIHBpbGloYW5fNCA9IGludChpbnB1dCgiSW5wdXQgb3B0aW9uID4gIikpCiAgICAgICAgICAgICAgICBpZiBwaWxpaGFuXzQgPT0gMToKICAgICAgICAgICAgICAgICAgICBwcmludCgiY2hvb3NlIGRldmljZSIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBBbmRyb2lkIChUZXJtdXgpIikKICAgICAgICAgICAgICAgICAgICBwcmludCgiWzJdIExpbnV4IikKICAgICAgICAgICAgICAgICAgICBvcyA9IGludChpbnB1dCgiSW5wdXQgb3B0aW9uID4gIikpCiAgICAgICAgICAgICAgICAgICAgaWYgb3MgPT0gMToKICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCB4c3N0cmlrZSIpICAKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBlbGlmIG9zID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9zMG1kM3YvWFNTdHJpa2UuZ2l0IikKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsaWYgcGlsaWhhbl80ID09IDI6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJycnCvCfkqEgV2hhdCBpcyBYU1N0cmlrZT8KWFNTdHJpa2UgaXMgYSBwb3dlcmZ1bCB0b29sIGZvciBkZXRlY3RpbmcgYW5kIGV4cGxvaXRpbmcgKipDcm9zcy1TaXRlIFNjcmlwdGluZyAoWFNTKSoqIHZ1bG5lcmFiaWxpdGllcyBpbiB3ZWJzaXRlcy4gIAoK8J+boCBCYXNpYyBSZXF1aXJlbWVudHMKQmVmb3JlIHVzaW5nIFhTU3RyaWtlOiAgCuKclCBJbnN0YWxsICoqUHl0aG9uIDMqKiAocmVxdWlyZWQpLiAgCuKclCBLbm93IGEgVVJMIHRoYXQgbWF5IGJlIHZ1bG5lcmFibGUgdG8gWFNTLiAgCgrwn5OlIEluc3RhbGxhdGlvbiBMaW51eAoxLiBDbG9uZSB0aGUgWFNTdHJpa2UgUmVwb3NpdG9yeSAKUnVuIHRoaXMgY29tbWFuZCB0byBkb3dubG9hZCBYU1N0cmlrZTogIApnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3MwbWQzdi9YU1N0cmlrZS5naXQKCjIuIE5hdmlnYXRlIHRvIHRoZSBYU1N0cmlrZSBGb2xkZXIgCmNkIFhTU3RyaWtlCgozLiBJbnN0YWxsIERlcGVuZGVuY2llcwpwaXAzIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dAoKNC4gTWFrZSB0aGUgU2NyaXB0IEV4ZWN1dGFibGUgKExpbnV4IE9ubHkpCmNobW9kICt4IHhzc3RyaWtlLnB5Cgrwn5OMIEJhc2ljIFVzYWdlCgoxLiBUZXN0IGEgVVJMIGZvciBYU1MKeHNzdHJpa2UucHkgLXUgImh0dHA6Ly9leGFtcGxlLmNvbS9zZWFyY2g/cT10ZXN0Ci0gYC11YCA9IFRhcmdldCBVUkwgdG8gdGVzdC4gIAoKMi4gQ3Jhd2wgYSBXZWJzaXRlICYgVGVzdCBmb3IgWFNTIAp4c3N0cmlrZS5weSAtdSAiaHR0cDovL2V4YW1wbGUuY29tIiAtLWNyYXdsCi0gYC0tY3Jhd2xgID0gQXV0b21hdGljYWxseSBzY2FuIGFsbCBwYWdlcyBvZiB0aGUgd2Vic2l0ZS4gIAoKMy4gVGVzdCB3aXRoIGEgQ3VzdG9tIFBheWxvYWQKeHNzdHJpa2UucHkgLXUgImh0dHA6Ly9leGFtcGxlLmNvbS9zZWFyY2g/cT10ZXN0IiAtLXBheWxvYWQgIjxzY3JpcHQ+YWxlcnQoJ1hTUycpPC9zY3JpcHQ+IgotIGAtLXBheWxvYWRgID0gVXNlIGEgY3VzdG9tIFhTUyBwYXlsb2FkLiAgCgo0LiBTYXZlIFJlc3VsdHMgdG8gYSBGaWxlKiogIAp4c3N0cmlrZS5weSAtdSAiaHR0cDovL2V4YW1wbGUuY29tIiAtLW91dHB1dCByZXN1bHQudHh0Ci0gYC0tb3V0cHV0YCA9IFNhdmUgZmluZGluZ3MgdG8gYSBmaWxlLiAgCgrimqDvuI8gV2FybmluZzoKLSBVc2UgWFNTdHJpa2Ugb25seSBvbiB3ZWJzaXRlcyB5b3Ugb3duIG9yIGhhdmUgcGVybWlzc2lvbiB0byB0ZXN0LiAgCi0gVW5hdXRob3JpemVkIHRlc3RpbmcgaXMgaWxsZWdhbCBhbmQgY2FuIGxlYWQgdG8gc2VyaW91cyBjb25zZXF1ZW5jZXMuCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICNEaXJiL2RpcmJ1c3RlcgogICAgICAgICAgICBlbGlmIHBpbGloYW5fdG9vbCA9PSAxMDoKICAgICAgICAgICAgICAgIHByaW50KCJcbkRpcmIvZGlyYnVzdGVyIG1lbnUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzQgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgaWYgcGlsaWhhbl80ID09IDE6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNob29zZSBkZXZpY2UiKQogICAgICAgICAgICAgICAgICAgIHByaW50KCJbMV0gQW5kcm9pZCAoVGVybXV4KSIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBMaW51eCIpCiAgICAgICAgICAgICAgICAgICAgb3MgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgICAgIGlmIG9zID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgicGtnIGluc3RhbGwgZ29sYW5nIC15IikgIAogICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImdvIGluc3RhbGwgZ2l0aHViLmNvbS9PSi9nb2J1c3Rlci92M0BsYXRlc3QiKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGVsaWYgb3MgPT0gMjoKICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJzdWRvIGFwdCB1cGRhdGUgJiYgc3VkbyBhcHQgaW5zdGFsbCBkaXJiIC15IikKICAgICAgICAgICAgICAgIGVsaWYgcGlsaWhhbl80ID09IDI6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJycnCvCfkqEgV2hhdCBpcyBESVJCL0RpckJ1c3Rlcj8gIApESVJCIChvciBEaXJCdXN0ZXIpIGlzIGEgd2ViIGRpcmVjdG9yeSBzY2FubmVyIHRoYXQgYnJ1dGUtZm9yY2VzIGRpcmVjdG9yaWVzIGFuZCBmaWxlcyBvbiBhIHdlYiBzZXJ2ZXIuIEl0IGhlbHBzIGZpbmQgaGlkZGVuIHBhdGhzIGxpa2UgYWRtaW4gcGFuZWxzLCBiYWNrdXBzLCBvciBzZW5zaXRpdmUgZmlsZXMuCgrwn5ugIEJhc2ljIFJlcXVpcmVtZW50cyAgCkJlZm9yZSB1c2luZyBESVJCL0RpckJ1c3RlcjogIAoxLiBJbnN0YWxsIERJUkIgKExpbnV4KSBvciBEaXJCdXN0ZXIgKFRlcm11eCkuICAKMi4gS25vdyB0aGUgdGFyZ2V0IHdlYnNpdGUgVVJMIChlLmcuLCBgaHR0cDovL2V4YW1wbGUuY29tYCkuICAKMy4gVXNlIHJlc3BvbnNpYmx54oCUb25seSBzY2FuIHdlYnNpdGVzIHlvdSBvd24gb3IgaGF2ZSBwZXJtaXNzaW9uIHRvIHRlc3QuICAKCvCfk6UgSW5zdGFsbGF0aW9uIApPbiBMaW51eCAoRGViaWFuL1VidW50dS9LYWxpKSAKc3VkbyBhcHQgdXBkYXRlICYmIHN1ZG8gYXB0IGluc3RhbGwgZGlyYiAteQoKT24gVGVybXV4CkRpckJ1c3RlciBpc27igJl0IGRpcmVjdGx5IGF2YWlsYWJsZSwgYnV0IHlvdSBjYW4gdXNlIGdvYnVzdGVyIChzaW1pbGFyIHRvb2wpOiAgCnBrZyBpbnN0YWxsIGdvbGFuZyAteQpnbyBpbnN0YWxsIGdpdGh1Yi5jb20vT0ovZ29idXN0ZXIvdjNAbGF0ZXN0Cm12IH4vZ28vYmluL2dvYnVzdGVyIC9kYXRhL2RhdGEvY29tLnRlcm11eC9maWxlcy91c3IvYmluLwoK8J+TjCBCYXNpYyBDb21tYW5kcwoxLiBTY2FuIGEgV2Vic2l0ZSBmb3IgRGlyZWN0b3JpZXMgCmRpcmIgaHR0cDovL2V4YW1wbGUuY29tCi0gU2NhbnMgdGhlIHRhcmdldCB3aXRoIGEgZGVmYXVsdCB3b3JkbGlzdC4gIAoKMi4gVXNlIGEgQ3VzdG9tIFdvcmRsaXN0ICAKZGlyYiBodHRwOi8vZXhhbXBsZS5jb20gL3BhdGgvdG8vd29yZGxpc3QudHh0Ci0gUmVwbGFjZSBgL3BhdGgvdG8vd29yZGxpc3QudHh0YCB3aXRoIGEgZmlsZSBsaWtlIGBjb21tb24udHh0YCAoS2FsaSB3b3JkbGlzdHM6IGAvdXNyL3NoYXJlL3dvcmRsaXN0cy9kaXJiL2ApLiAgCgozLiBTY2FuIHdpdGggRXh0ZW5zaW9ucyAoZS5nLiwgUEhQLCBIVE1MKQpkaXJiIGh0dHA6Ly9leGFtcGxlLmNvbSAtWCAucGhwLC5odG1sCi0gYC1YYCBjaGVja3MgZm9yIGZpbGVzIHdpdGggdGhlc2UgZXh0ZW5zaW9ucy4gIAoKNC4gU2tpcCBOb24tRXhpc3RpbmcgUGFnZXMgKEZhc3RlciBTY2FuKQpkaXJiIGh0dHA6Ly9leGFtcGxlLmNvbSAtTiA0MDQKLSBgLU4gNDA0YCBpZ25vcmVzICI0MDQgTm90IEZvdW5kIiByZXNwb25zZXMuICAKCkV4YW1wbGUgT3V0cHV0ClVSTF9CQVNFOiBodHRwOi8vZXhhbXBsZS5jb20vICAKV09SRExJU1RfRklMRVM6IC91c3Ivc2hhcmUvd29yZGxpc3RzL2RpcmIvY29tbW9uLnR4dCAgCgpHRU5FUkFURUQgV09SRFM6IDQ2MTIgIAotLS0tIFNjYW5uaW5nIFVSTDogaHR0cDovL2V4YW1wbGUuY29tLyAtLS0tCisgaHR0cDovL2V4YW1wbGUuY29tL2FkbWluIChDT0RFOjIwMHxTSVpFOjEyMzQpICAKKyBodHRwOi8vZXhhbXBsZS5jb20vbG9naW4gKENPREU6MzAyfFNJWkU6MCkgIAorIGh0dHA6Ly9leGFtcGxlLmNvbS9iYWNrdXAgKENPREU6NDAzfFNJWkU6NTY3KSAgCi0gYENPREU6MjAwYCA9IEZvdW5kIChzdWNjZXNzKS4gIAotIGBDT0RFOjQwM2AgPSBGb3JiaWRkZW4gKG5vIGFjY2VzcykuICAKCuKaoO+4jyBXYXJuaW5nIAotIExlZ2FsIFVzZSBPbmx5OiBVbmF1dGhvcml6ZWQgc2Nhbm5pbmcgaXMgaWxsZWdhbC4gIAotIFJhdGUgTGltaXRpbmc6IEFkZCBgLXogMTAwbXNgIHRvIHNsb3cgZG93biByZXF1ZXN0cyBhbmQgYXZvaWQgY3Jhc2hpbmcgc2VydmVycy4gIAoKQWx0ZXJuYXRpdmUgZm9yIFRlcm11eCAoR29idXN0ZXIpIApnb2J1c3RlciBkaXIgLXUgaHR0cDovL2V4YW1wbGUuY29tIC13IC9wYXRoL3RvL3dvcmRsaXN0LnR4dAotIGBkaXJgOiBEaXJlY3RvcnkgYnJ1dGUtZm9yY2UgbW9kZS4gIAotIGAtd2A6IFdvcmRsaXN0IHBhdGguCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICNOaWt0bwogICAgICAgICAgICBlbGlmIHBpbGloYW5fdG9vbCA9PSA5OgogICAgICAgICAgICAgICAgcHJpbnQoIlxuTmlrdG8gbWVudSIpCiAgICAgICAgICAgICAgICBwcmludCgiWzFdIEluc3RhbGxhdGlvbiIpCiAgICAgICAgICAgICAgICBwcmludCgiWzJdIEhvdyB0byB1c2U/IikKICAgICAgICAgICAgICAgIHBpbGloYW5fNCA9IGludChpbnB1dCgiSW5wdXQgb3B0aW9uID4gIikpCiAgICAgICAgICAgICAgICBpZiBwaWxpaGFuXzQgPT0gMToKICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vc3VsbG8vbmlrdG8uZ2l0IikKICAgICAgICAgICAgICAgIGVsaWYgcGlsaWhhbl80ID09IDI6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJycnCvCfkqEgV2hhdCBpcyBOaWt0bz8KTmlrdG8gaXMgYSBwb3B1bGFyIG9wZW4tc291cmNlIHdlYiBzZXJ2ZXIgc2Nhbm5lciB0aGF0IGNoZWNrcyBmb3IgdnVsbmVyYWJpbGl0aWVzLCBtaXNjb25maWd1cmF0aW9ucywgYW5kIG91dGRhdGVkIHNvZnR3YXJlIG9uIHdlYiBzZXJ2ZXJzLiAgCgrwn5ugIEJhc2ljIFJlcXVpcmVtZW50cwpCZWZvcmUgdXNpbmcgTmlrdG86ICAKLSBJbnN0YWxsICoqTmlrdG8qKiAoTGludXgvVGVybXV4KS4gIAotIEEgdGFyZ2V0IFVSTCAoZS5nLiwgYGh0dHA6Ly9leGFtcGxlLmNvbWApLiAgCi0gQmFzaWMga25vd2xlZGdlIG9mIHRlcm1pbmFsIGNvbW1hbmRzLiAgCgrwn5OlIEluc3RhbGxhdGlvbgphcHQgaW5zdGFsbCBwZXJsCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vc3VsbG8vbmlrdG8uZ2l0CmNkIG5pa3RvL3Byb2dyYW0KcGVybCBuaWt0by5wbCAtaAoK8J+TjCBCYXNpYyBVc2FnZQoxLiBTY2FuIGEgV2Vic2l0ZQpuaWt0byAtaCBodHRwOi8vZXhhbXBsZS5jb20KLSBgLWhgID0gVGFyZ2V0IFVSTC4gIAoKMi4gU2NhbiB3aXRoIFNwZWNpZmljIFBvcnQgCm5pa3RvIC1oIGh0dHA6Ly9leGFtcGxlLmNvbSAtcCA4MDgwCi0gYC1wYCA9IFNwZWNpZnkgYSBwb3J0IChkZWZhdWx0OiA4MCBmb3IgSFRUUCwgNDQzIGZvciBIVFRQUykuICAKCjMuIFNhdmUgUmVzdWx0cyB0byBhIEZpbGUKbmlrdG8gLWggaHR0cDovL2V4YW1wbGUuY29tIC1vIHJlc3VsdC50eHQKLSBgLW9gID0gU2F2ZSBvdXRwdXQgdG8gYSBmaWxlLiAgCgo0LiBTY2FuIFVzaW5nIEhUVFBTIChTU0wpCm5pa3RvIC1oIGh0dHBzOi8vZXhhbXBsZS5jb20gLXNzbAotIGAtc3NsYCA9IEZvcmNlIFNTTCBtb2RlLiAgCgo1LiBVcGRhdGUgTmlrdG/igJlzIERhdGFiYXNlIApuaWt0byAtdXBkYXRlCi0gQWx3YXlzIHVwZGF0ZSBiZWZvcmUgc2Nhbm5pbmcgZm9yIHRoZSBsYXRlc3QgdnVsbmVyYWJpbGl0eSBjaGVja3MuICAKCuKaoO+4jyBXYXJuaW5nOiAKLSBVc2UgTmlrdG8gb25seSBvbiB3ZWJzaXRlcyB5b3Ugb3duKiogb3IgaGF2ZSBwZXJtaXNzaW9uIHRvIHNjYW4uICAKLSBVbmF1dGhvcml6ZWQgc2Nhbm5pbmcgaXMgaWxsZWdhbCBhbmQgY2FuIGxlYWQgdG8gbGVnYWwgY29uc2VxdWVuY2VzLiAgCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICNicnV0ZXN1aXRlCiAgICAgICAgICAgIGlmIHBpbGloYW5fdG9vbCA9PSA4OgogICAgICAgICAgICAgICAgcHJpbnQoIlxuQnJ1dGVTdWl0ZSBtZW51IikKICAgICAgICAgICAgICAgIHByaW50KCJbMV0gSW5zdGFsbGF0aW9uIikKICAgICAgICAgICAgICAgIHByaW50KCJbMl0gSG93IHRvIHVzZT8iKQogICAgICAgICAgICAgICAgcGlsaWhhbl80ID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgIGlmIHBpbGloYW5fNCA9PSAxOgogICAgICAgICAgICAgICAgICAgIHByaW50KCJjaG9vc2UgZGV2aWNlIikKICAgICAgICAgICAgICAgICAgICBwcmludCgiWzFdIEFuZHJvaWQgKFRlcm11eCkiKQogICAgICAgICAgICAgICAgICAgIHByaW50KCJbMl0gTGludXgiKQogICAgICAgICAgICAgICAgICAgIG9zID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgICAgICBpZiBvcyA9PSAxOgogICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vc2FyYWNlbi9icnV0ZXN1aXRlIikgIAogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGVsaWYgb3MgPT0gMjoKICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJzdWRvIGFwdCBpbnN0YWxsIHB5dGhvbjMgcHl0aG9uMy1waXAgLXkiKQogICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oInN1ZG8gcGlwMyBpbnN0YWxsIGJydXRlc3VpdGUiKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBwaWxpaGFuXzQgPT0gMjoKICAgICAgICAgICAgICAgICAgICBwcmludCgnJycK8J+SoSBXaGF0IGlzIEJydXRlU3VpdGU/CkJydXRlU3VpdGUgaXMgYSBjb2xsZWN0aW9uIG9mIHRvb2xzIGZvciBicnV0ZS1mb3JjZSBhdHRhY2tzLCBwYXNzd29yZCBjcmFja2luZywgYW5kIHNlY3VyaXR5IHRlc3RpbmcuIEl0IGluY2x1ZGVzIHRvb2xzIGxpa2UgSFRUUCBicnV0ZS1mb3JjaW5nLCBGVFAgYnJ1dGUtZm9yY2luZywgYW5kIG1vcmUuCgrwn5ugIEluc3RhbGxhdGlvbiBHdWlkZQpGb3IgTGludXg6CjEuIEluc3RhbGwgUHl0aG9uIGFuZCBwaXAgKGlmIG5vdCBhbHJlYWR5IGluc3RhbGxlZCkKc3VkbyBhcHQgdXBkYXRlCnN1ZG8gYXB0IGluc3RhbGwgcHl0aG9uMyBweXRob24zLXBpcCAteQoKMi4gSW5zdGFsbCBCcnV0ZVN1aXRlCnN1ZG8gcGlwMyBpbnN0YWxsIGJydXRlc3VpdGUKCjMuIFZlcmlmeSBpbnN0YWxsYXRpb24KYnJ1dGVzdWl0ZSAtLXZlcnNpb24KCkZvciBUZXJtdXggKENMSSBvbmx5KToKcGtnIHVwZGF0ZSAmJiBwa2cgdXBncmFkZSAteQpwa2cgaW5zdGFsbCBweXRob24gZ2l0IC15CmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vc2FyYWNlbi9icnV0ZXN1aXRlCmNkIGJydXRlc3VpdGUKcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dAoK8J+TjCBCYXNpYyBVc2FnZSBFeGFtcGxlcwoxLiBIVFRQIEJhc2ljIEF1dGggQnJ1dGUgRm9yY2UKYnJ1dGVzdWl0ZSBodHRwX2Jhc2ljIC11IGh0dHA6Ly9leGFtcGxlLmNvbS9hZG1pbiAtdyBwYXNzd29yZHMudHh0IC1VIGFkbWluCi0gYGh0dHBfYmFzaWNgID0gbW9kdWxlIGZvciBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uCi0gYC11YCA9IHRhcmdldCBVUkwKLSBgLXdgID0gd29yZGxpc3QvcGFzc3dvcmQgZmlsZQotIGAtVWAgPSB1c2VybmFtZSB0byB0ZXN0CgoyLiBGb3JtLWJhc2VkIExvZ2luIEF0dGFjawpicnV0ZXN1aXRlIGh0dHBfZm9ybSAtdSBodHRwOi8vZXhhbXBsZS5jb20vbG9naW4ucGhwIC13IHBhc3N3b3Jkcy50eHQgLVUgdXNlcnMudHh0IC1kICJ1c2VybmFtZT1VU0VSJnBhc3N3b3JkPVBBU1Mmc3VibWl0PUxvZ2luIiAtZiAiTG9naW4gZmFpbGVkIgotIGBodHRwX2Zvcm1gID0gbW9kdWxlIGZvciBmb3JtLWJhc2VkIGxvZ2lucwotIGAtZGAgPSBQT1NUIGRhdGEgKFVTRVIvUEFTUyB3aWxsIGJlIHJlcGxhY2VkKQotIGAtZmAgPSBmYWlsdXJlIHN0cmluZyAodG8gaWRlbnRpZnkgd3JvbmcgYXR0ZW1wdHMpCgozLiBGVFAgQnJ1dGUgRm9yY2UKYnJ1dGVzdWl0ZSBmdHAgLXQgZnRwLmV4YW1wbGUuY29tIC13IHBhc3N3b3Jkcy50eHQgLVUgYWRtaW4KLSBgZnRwYCA9IEZUUCBtb2R1bGUKLSBgLXRgID0gdGFyZ2V0IGhvc3QKCjQuIFdvcmRsaXN0IE1hbmFnZW1lbnQKYnJ1dGVzdWl0ZSB3b3JkbGlzdCAtaSByb2NreW91LnR4dCAtbyBjdXN0b21fbGlzdC50eHQgLS1taW4gNiAtLW1heCAxMgotIGB3b3JkbGlzdGAgPSBtb2R1bGUgdG8gZmlsdGVyIHdvcmRsaXN0cwotIGAtaWAgPSBpbnB1dCBmaWxlCi0gYC1vYCA9IG91dHB1dCBmaWxlCi0gYC0tbWluLy0tbWF4YCA9IHBhc3N3b3JkIGxlbmd0aCByYW5nZQoK4pqg77iPIEltcG9ydGFudCBOb3RlczoKMS4gQWx3YXlzIGdldCBwZXJtaXNzaW9uIGJlZm9yZSB0ZXN0aW5nIGFueSBzeXN0ZW0KMi4gVXNlIGAtdGAgKHRocmVhZHMpIGNhcmVmdWxseSB0byBhdm9pZCBvdmVybG9hZGluZyBzeXN0ZW1zCjMuIEZvciBjb21wbGV4IGZvcm1zLCB1c2UgYC12YCAodmVyYm9zZSkgdG8gZGVidWcKNC4gU3RvcmUgcmVzdWx0cyB3aXRoIGAtciByZXN1bHRzLnR4dGAgb3B0aW9uCgrwn5SNIEV4YW1wbGUgQXR0YWNrIEZsb3c6CjEuIENyZWF0ZSBmaWx0ZXJlZCB3b3JkbGlzdApicnV0ZXN1aXRlIHdvcmRsaXN0IC1pIGJpZ19saXN0LnR4dCAtbyBmaWx0ZXJlZC50eHQgLS1taW4gOAoKMi4gUnVuIEhUVFAgZm9ybSBhdHRhY2sKYnJ1dGVzdWl0ZSBodHRwX2Zvcm0gLXUgaHR0cDovL3Rlc3QuY29tL2xvZ2luIC13IGZpbHRlcmVkLnR4dCAtVSBhZG1pbiAtZCAidXNlcj1hZG1pbiZwYXNzPVBBU1MiIC1mICJpbnZhbGlkIiAtdCA1IC1yIHJlc3VsdHMudHh0CgozLiBDaGVjayByZXN1bHRzCmNhdCByZXN1bHRzLnR4dAonJycpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAjV2lyZXNoYXJrCiAgICAgICAgICAgIGVsaWYgcGlsaWhhbl90b29sID09IDc6CiAgICAgICAgICAgICAgICBwcmludCgiXG5XaXJlc2hhcmsgbWVudSIpCiAgICAgICAgICAgICAgICBwcmludCgiWzFdIEluc3RhbGxhdGlvbiIpCiAgICAgICAgICAgICAgICBwcmludCgiWzJdIEhvdyB0byB1c2U/IikKICAgICAgICAgICAgICAgIHBpbGloYW5fNCA9IGludChpbnB1dCgiSW5wdXQgb3B0aW9uID4gIikpCiAgICAgICAgICAgICAgICBpZiBwaWxpaGFuXzQgPT0gMToKICAgICAgICAgICAgICAgICAgICBwcmludCgiY2hvb3NlIGRldmljZSIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBBbmRyb2lkIChUZXJtdXgpIikKICAgICAgICAgICAgICAgICAgICBwcmludCgiWzJdIExpbnV4IikKICAgICAgICAgICAgICAgICAgICBvcyA9IGludChpbnB1dCgiSW5wdXQgb3B0aW9uID4gIikpCiAgICAgICAgICAgICAgICAgICAgaWYgb3MgPT0gMToKICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJwa2cgdXBkYXRlICYmIHBrZyBpbnN0YWxsIHRzaGFyayIpICAKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBlbGlmIG9zID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgic3VkbyBhcHQgdXBkYXRlICYmIHN1ZG8gYXB0IGluc3RhbGwgd2lyZXNoYXJrIikKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsaWYgcGlsaWhhbl80ID09IDI6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJycnIArwn5KhIFdoYXQgaXMgV2lyZXNoYXJrPyAgCldpcmVzaGFyayBpcyBhIG5ldHdvcmsgcHJvdG9jb2wgYW5hbHl6ZXIgdGhhdCBjYXB0dXJlcyBhbmQgaW5zcGVjdHMgbmV0d29yayB0cmFmZmljIGluIHJlYWwtdGltZS4gIAoK8J+boCBJbnN0YWxsYXRpb24gR3VpZGUgCk9uIExpbnV4IChEZWJpYW4vVWJ1bnR1KSAgCjEuIEluc3RhbGwgV2lyZXNoYXJrIChHVUkpOiAgCnN1ZG8gYXB0IHVwZGF0ZSAmJiBzdWRvIGFwdCBpbnN0YWxsIHdpcmVzaGFyawogICAKMi4gQWxsb3cgbm9uLXJvb3QgdXNlcnMgdG8gY2FwdHVyZSBwYWNrZXRzIChvcHRpb25hbCk6ICAKc3VkbyB1c2VybW9kIC1hRyB3aXJlc2hhcmsgJFVTRVIKKExvZyBvdXQgYW5kIGJhY2sgaW4gdG8gYXBwbHkgY2hhbmdlcy4pCgpPbiBUZXJtdXggKE5vIEdVSSwgQ0xJIEFsdGVybmF0aXZlKQpTaW5jZSBXaXJlc2hhcmvigJlzIEdVSSBkb2VzbuKAmXQgd29yayBvbiBUZXJtdXgsIHVzZSBgdHNoYXJrYCAoV2lyZXNoYXJr4oCZcyBDTEkgdmVyc2lvbik6ICAKMS4gSW5zdGFsbCBUU2hhcms6CiAgIHBrZyB1cGRhdGUgJiYgcGtnIGluc3RhbGwgdHNoYXJrCiAgCjIuIEdyYW50IHN0b3JhZ2UgcGVybWlzc2lvbnMgKGZvciBzYXZpbmcgY2FwdHVyZXMpOiAgCiAgIHRlcm11eC1zZXR1cC1zdG9yYWdlCiAgIArwn5OMIEJhc2ljIFVzYWdlCk9uIExpbnV4IChHVUkpIAoxLiBMYXVuY2ggV2lyZXNoYXJrOiAgCiAgIHdpcmVzaGFyawogIAoyLiBDYXB0dXJlIFRyYWZmaWM6IAotIFNlbGVjdCBhIG5ldHdvcmsgaW50ZXJmYWNlIChlLmcuLCBgZXRoMGAsIGB3bGFuMGApLiAgCi0gQ2xpY2sgU3RhcnQgdG8gYmVnaW4gY2FwdHVyaW5nIHBhY2tldHMuICAKCjMuIEZpbHRlciBUcmFmZmljOiAgCi0gVXNlIGZpbHRlcnMgbGlrZSBgaHR0cGAsIGB0Y3AucG9ydD09ODBgLCBvciBgaXAuYWRkcj09MTkyLjE2OC4xLjFgLiAgCgpPbiBUZXJtdXggKENMSSB3aXRoIFRTaGFyaykKMS4gTGlzdCBhdmFpbGFibGUgaW50ZXJmYWNlczogIAp0c2hhcmsgLUQKICAgCjIuIENhcHR1cmUgcGFja2V0cyAocmVwbGFjZSBgd2xhbjBgIHdpdGggeW91ciBpbnRlcmZhY2UpOiAgCnRzaGFyayAtaSB3bGFuMAogICAKMy4gU2F2ZSBjYXB0dXJlcyB0byBhIGZpbGU6ICAKdHNoYXJrIC1pIHdsYW4wIC13IGNhcHR1cmUucGNhcAogICAKNC4gRmlsdGVyIHRyYWZmaWMgKGUuZy4sIEhUVFAgb25seSk6ICAKdHNoYXJrIC1pIHdsYW4wIC1ZICJodHRwIgogIAo1LiBSZWFkIGEgc2F2ZWQgY2FwdHVyZTogIAp0c2hhcmsgLXIgY2FwdHVyZS5wY2FwCiAgIArimqDvuI8gV2FybmluZwotIFVzZSBXaXJlc2hhcmsvVFNoYXJrIG9ubHkgb24gbmV0d29ya3MgeW91IG93biBvciBoYXZlIHBlcm1pc3Npb24gdG8gYW5hbHl6ZS4gIAotIENhcHR1cmluZyBzZW5zaXRpdmUgZGF0YSAoZS5nLiwgcGFzc3dvcmRzKSBtYXkgYmUgaWxsZWdhbCB3aXRob3V0IGF1dGhvcml6YXRpb24uICAKCi0tLQoK8J+UuSBFeGFtcGxlIChUZXJtdXgpIApDYXB0dXJlIEhUVFAgdHJhZmZpYyBhbmQgc2F2ZSBpdDogIAp0c2hhcmsgLWkgd2xhbjAgLVkgImh0dHAiIC13IGh0dHBfdHJhZmZpYy5wY2FwCihQcmVzcyBgQ3RybCtDYCB0byBzdG9wIGNhcHR1cmluZy4pCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICNoeWRyYWEKICAgICAgICAgICAgZWxpZiBwaWxpaGFuX3Rvb2wgPT0gNjoKICAgICAgICAgICAgICAgIHByaW50KCJcbkh5ZHJhIG1lbnUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzQgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgaWYgcGlsaWhhbl80ID09IDE6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNob29zZSBkZXZpY2UiKQogICAgICAgICAgICAgICAgICAgIHByaW50KCJbMV0gQW5kcm9pZCAoVGVybXV4KSIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBMaW51eCIpCiAgICAgICAgICAgICAgICAgICAgb3MgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgICAgIGlmIG9zID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgicGtnIGluc3RhbGwgZ2l0IG1ha2Ugb3BlbnNzbC10b29sIC15IikgIAogICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oImdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vdmFuaGF1c2VyLXRoYy90aGMtaHlkcmEiKQogICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgIGVsaWYgb3MgPT0gMjoKICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJzdWRvIGFwdCB1cGRhdGUgJiYgc3VkbyBhcHQgaW5zdGFsbCBoeWRyYSAteSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fNCA9PSAyOgogICAgICAgICAgICAgICAgICAgIHByaW50KCcnJwrwn5KhIFdoYXQgaXMgVEhDLUh5ZHJhPyAgClRIQy1IeWRyYSBpcyBhIHBvd2VyZnVsICoqbG9naW4gYnJ1dGUtZm9yY2luZyB0b29sKiogdGhhdCBzdXBwb3J0cyBtYW55IHByb3RvY29scyAoU1NILCBGVFAsIEhUVFAsIFJEUCwgZXRjLikuIEl04oCZcyBmYXN0ZXIgdGhhbiByZWd1bGFyIEh5ZHJhIGFuZCB3b3JrcyB3ZWxsIG9uIFRlcm11eC4KCvCfm6AgSW5zdGFsbGF0aW9uIEd1aWRlCk9uIExpbnV4IChLYWxpL0RlYmlhbi9VYnVudHUpCjEuIE9wZW4gYSB0ZXJtaW5hbCBhbmQgcnVuOiAgCiAgIHN1ZG8gYXB0IHVwZGF0ZSAmJiBzdWRvIGFwdCBpbnN0YWxsIGh5ZHJhIC15CiAgIChLYWxpIExpbnV4IGFscmVhZHkgaW5jbHVkZXMgSHlkcmEgYnkgZGVmYXVsdC4pIAoKT24gVGVybXV4IChBbmRyb2lkKSDigJMgSW5zdGFsbCBUSEMtSHlkcmEKMS4gVXBkYXRlIFRlcm11eCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXM6ICAKICAgcGtnIHVwZGF0ZSAmJiBwa2cgdXBncmFkZSAteQogICBwa2cgaW5zdGFsbCBnaXQgbWFrZSBvcGVuc3NsLXRvb2wgLXkKICAgCjIuIENsb25lICYgY29tcGlsZSBUSEMtSHlkcmE6ICAKICAgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS92YW5oYXVzZXItdGhjL3RoYy1oeWRyYQogICBjZCB0aGMtaHlkcmEKICAgLi9jb25maWd1cmUKICAgbWFrZSAmJiBtYWtlIGluc3RhbGwKICAgIAozLiBWZXJpZnkgaW5zdGFsbGF0aW9uOiAgCmh5ZHJhIC1oCgrwn5OMIEJhc2ljIFRIQy1IeWRyYSBDb21tYW5kcyAKMS4gQXR0YWNrIGFuIEhUVFAgTG9naW4gUGFnZSAKVGFyZ2V0OiBgaHR0cDovL2V4YW1wbGUuY29tL2xvZ2luLnBocGAgIApVc2VybmFtZTogYGFkbWluYCAgClBhc3N3b3JkIExpc3Q6IGBwYXNzd29yZHMudHh0YCAgCmh5ZHJhIC1sIGFkbWluIC1QIHBhc3N3b3Jkcy50eHQgZXhhbXBsZS5jb20gaHR0cC1wb3N0LWZvcm0gIi9sb2dpbi5waHA6dXNlcj1eVVNFUl4mcGFzcz1eUEFTU146Rj1pbmNvcnJlY3QiCi0gYC1sYCA9IFNpbmdsZSB1c2VybmFtZSAgCi0gYC1QYCA9IFBhc3N3b3JkIGxpc3QgZmlsZSAgCi0gYGh0dHAtcG9zdC1mb3JtYCA9IEhUVFAgZm9ybSBhdHRhY2sgIAotIGBGPWluY29ycmVjdGAgPSBGYWlsdXJlIG1lc3NhZ2UgKHN0b3BzIGlmIHNlZW4pICAKCjIuIEJydXRlLUZvcmNlIFNTSCAKaHlkcmEgLUwgdXNlcm5hbWVzLnR4dCAtUCBwYXNzd29yZHMudHh0IC10IDQgc3NoOi8vMTkyLjE2OC4xLjEKLSBgLXQgNGAgPSA0IHRocmVhZHMgKHByZXZlbnRzIGNyYXNoZXMpICAKLSBgc3NoOi8vYCA9IFRhcmdldCBwcm90b2NvbCAgCgozLiBBdHRhY2sgRlRQIExvZ2luIApoeWRyYSAtbCBmdHB1c2VyIC1QIHBhc3N3b3Jkcy50eHQgZnRwOi8vMTkyLjE2OC4xLjEKCjQuIEF0dGFjayBXb3JkUHJlc3MgQWRtaW4gUGFuZWwqCmh5ZHJhIC1MIHVzZXJzLnR4dCAtUCBwYXNzd29yZHMudHh0IGV4YW1wbGUuY29tIGh0dHAtcG9zdC1mb3JtICIvd3AtbG9naW4ucGhwOmxvZz1eVVNFUl4mcHdkPV5QQVNTXjpUaGUgcGFzc3dvcmQgaXMgaW5jb3JyZWN0IgoK4pqg77iPIFdhcm5pbmcKLSBMZWdhbCBVc2UgT25seSEgVGVzdCBvbmx5IHN5c3RlbXMgeW91IG93biBvciBoYXZlIHBlcm1pc3Npb24gdG8gYXR0YWNrLiAgCi0gVXNlIGAtdGAgKHRocmVhZHMpIHRvIGF2b2lkIG92ZXJ3aGVsbWluZyB0aGUgdGFyZ2V0IChlLmcuLCBgLXQgNGApLiAgCgrwn5SlIFBybyBUaXBzICAKLSAqKldvcmRsaXN0cyoqOiBVc2UgYHJvY2t5b3UudHh0YCAoYHBrZyBpbnN0YWxsIHdnZXQgJiYgd2dldCBodHRwczovL2dpdGh1Yi5jb20vYnJhbm5vbmRvcnNleS9uYWl2ZS1oYXNoY2F0L3JlbGVhc2VzL2Rvd25sb2FkL2RhdGEvcm9ja3lvdS50eHRgKSAgCi0gU2F2ZSBSZXN1bHRzOiBBZGQgYC1vIHNhdmVkX3Jlc3VsdHMudHh0YCB0byBzYXZlIGNyYWNrZWQgcGFzc3dvcmRzLgoK8J+TgiBFeGFtcGxlIFdvcmtmbG93CjEuIFByZXBhcmUgYSBwYXNzd29yZCBsaXN0OiAgCmVjaG8gLWUgInBhc3N3b3JkXG4xMjM0NTZcbmFkbWluIiA+IHBhc3N3b3Jkcy50eHQKICAgCjIuIFJ1biBIeWRyYTogIApoeWRyYSAtbCBhZG1pbiAtUCBwYXNzd29yZHMudHh0IDE5Mi4xNjguMS4xIHNzaAogJycnKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgI2FpcmNyYWNrLW5nCiAgICAgICAgICAgIGVsaWYgcGlsaWhhbl90b29sID09IDU6CiAgICAgICAgICAgICAgICBwcmludCgiXG5BaXJjcmFjay1OZyBtZW51IikKICAgICAgICAgICAgICAgIHByaW50KCJbMV0gSW5zdGFsbGF0aW9uIikKICAgICAgICAgICAgICAgIHByaW50KCJbMl0gSG93IHRvIHVzZT8iKQogICAgICAgICAgICAgICAgcGlsaWhhbl8xID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgIGlmIHBpbGloYW5fMSA9PSAxOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJjcmFjay1uZy9haXJjcmFjay1uZy5naXQiKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fMSA9PSAyOgogICAgICAgICAgICAgICAgICAgIHByaW50KCcnJwrwn5KhIFdoYXQgaXMgQWlyY3JhY2stbmc/ICAKQWlyY3JhY2stbmcgaXMgYSBXaUZpIHNlY3VyaXR5IHRvb2xraXQgZm9yOiAgCi0gQ2FwdHVyaW5nIFdpRmkgcGFja2V0cyAgCi0gQ3JhY2tpbmcgV0VQL1dQQS9XUEEyIGVuY3J5cHRpb24gIAotIFRlc3RpbmcgbmV0d29yayB2dWxuZXJhYmlsaXRpZXMgIAoK8J+boCBJbnN0YWxsYXRpb24gKEdpdEh1YiBNZXRob2QpICAKT24gTGludXg6IAoxLiBJbnN0YWxsIGRlcGVuZGVuY2llczoKc3VkbyBhcHQgdXBkYXRlICYmIHN1ZG8gYXB0IGluc3RhbGwgYnVpbGQtZXNzZW50aWFsIGxpYnNzbC1kZXYgemxpYjFnLWRldiAteQoKMi4gQ2xvbmUgJiBjb21waWxlIGZyb20gR2l0SHViOiAgCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vYWlyY3JhY2stbmcvYWlyY3JhY2stbmcuZ2l0CmNkIGFpcmNyYWNrLW5nCmF1dG9yZWNvbmYgLWkKLi9jb25maWd1cmUgLS13aXRoLWV4cGVyaW1lbnRhbAptYWtlCnN1ZG8gbWFrZSBpbnN0YWxsCgozLiBWZXJpZnkgaW5zdGFsbGF0aW9uOiAKYWlyY3JhY2stbmcgLS12ZXJzaW9uCiAgIApPbiBUZXJtdXg6IAoxLiBJbnN0YWxsIGRlcGVuZGVuY2llczogIApwa2cgdXBkYXRlICYmIHBrZyBpbnN0YWxsIGdpdCBjbGFuZyBvcGVuc3NsIC15CgoyLiBDbG9uZSAmIGNvbXBpbGU6KiAKZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9haXJjcmFjay1uZy9haXJjcmFjay1uZy5naXQKY2QgYWlyY3JhY2stbmcKLi9hdXRvZ2VuLnNoCi4vY29uZmlndXJlIC0td2l0aC1leHBlcmltZW50YWwgLS1ob3N0PWFybS1saW51eC1hbmRyb2lkZWFiaQptYWtlCm1ha2UgaW5zdGFsbAoK8J+TjCBCYXNpYyBDb21tYW5kcyAgCjEuIENoZWNrIFdpRmkgaW50ZXJmYWNlczogIAphaXJtb24tbmcKCjIuIEVuYWJsZSBtb25pdG9yIG1vZGU6IAphaXJtb24tbmcgc3RhcnQgd2xhbjAgICMgUmVwbGFjZSAid2xhbjAiIHdpdGggeW91ciBpbnRlcmZhY2UKCjMuIFNjYW4gbmV0d29ya3M6IAphaXJvZHVtcC1uZyB3bGFuMG1vbgotIGBCU1NJRGA6IFJvdXRlciBNQUMgYWRkcmVzcyAgCi0gYENIYDogQ2hhbm5lbCAgCgo0LiBDYXB0dXJlIGhhbmRzaGFrZSAoV1BBL1dQQTIpOiAKYWlyb2R1bXAtbmcgLWMgW0NIQU5ORUxdIC0tYnNzaWQgW0JTU0lEXSAtdyBjYXB0dXJlIHdsYW4wbW9uCiAKNS4gQ3JhY2sgcGFzc3dvcmQ6ICAKYWlyY3JhY2stbmcgLXcgL3BhdGgvdG8vd29yZGxpc3QudHh0IGNhcHR1cmUtMDEuY2FwCgrimqDvuI8gV2FybmluZzogIAotIFVzZSBvbmx5IG9uIG5ldHdvcmtzIHlvdSBvd24gb3IgaGF2ZSBwZXJtaXNzaW9uIHRvIHRlc3QuICAKLSBVbmF1dGhvcml6ZWQgYWNjZXNzIGlzIGlsbGVnYWwuICAKCvCflLkgUHJvIFRpcHM6ICAKLSBGb3Igd29yZGxpc3RzLCB1c2UgYHJvY2t5b3UudHh0YCAoS2FsaTogYC91c3Ivc2hhcmUvd29yZGxpc3RzL3JvY2t5b3UudHh0YCkuICAKLSBNb25pdG9yIG1vZGUgcmVxdWlyZXMgY29tcGF0aWJsZSBXaUZpIGhhcmR3YXJlLiDwn5qACicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICNtZXRhc3Bsb2l0IGZyYW1ld29yawogICAgICAgICAgICBlbGlmIHBpbGloYW5fdG9vbCA9PSA0OgogICAgICAgICAgICAgICAgcHJpbnQoIlxuTWV0YXNwbG9pdCBGcmFtZXdvcmsiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzQgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgaWYgcGlsaWhhbl80ID09IDE6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoImNob29zZSBkZXZpY2UiKQogICAgICAgICAgICAgICAgICAgIHByaW50KCJbMV0gQW5kcm9pZCAoVGVybXV4KSIpCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBMaW51eCIpCiAgICAgICAgICAgICAgICAgICAgb2YgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgICAgIGlmIG9mID09IDE6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgicGtnIGluc3RhbGwgdW5zdGFibGUtcmVwbyAteSIpICAKICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJwa2cgaW5zdGFsbCBtZXRhc3Bsb2l0IC15IikKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICBlbGlmIG9mID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgic3VkbyBhcHQgaW5zdGFsbCBtZXRhc3Bsb2l0LWZyYW1ld29yayAteSIpCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fNCA9PSAyOgogICAgICAgICAgICAgICAgICAgIHByaW50KCcnJyAK8J+SoSBXaGF0IGlzIE1ldGFzcGxvaXQgRnJhbWV3b3JrPyAgCk1ldGFzcGxvaXQgaXMgYSBwb3dlcmZ1bCBwZW5ldHJhdGlvbiB0ZXN0aW5nIHRvb2wgdXNlZCB0byBmaW5kLCBleHBsb2l0LCBhbmQgdmFsaWRhdGUgdnVsbmVyYWJpbGl0aWVzIGluIHN5c3RlbXMuICAKCvCfm6AgSW5zdGFsbGF0aW9uIEd1aWRlIAoKT24gTGludXggKEthbGkvVWJ1bnR1L0RlYmlhbikKMS4gVXBkYXRlIHlvdXIgc3lzdGVtOgpzdWRvIGFwdCB1cGRhdGUgJiYgc3VkbyBhcHQgdXBncmFkZSAteQogCjIuIEluc3RhbGwgTWV0YXNwbG9pdDogCnN1ZG8gYXB0IGluc3RhbGwgbWV0YXNwbG9pdC1mcmFtZXdvcmsgLXkKCjMuIExhdW5jaCBNZXRhc3Bsb2l0Ogptc2Zjb25zb2xlCgpPbiBUZXJtdXggKEFuZHJvaWQpCjEuIFVwZGF0ZSBwYWNrYWdlczoKcGtnIHVwZGF0ZSAmJiBwa2cgdXBncmFkZSAteQoKMi4gSW5zdGFsbCBkZXBlbmRlbmNpZXM6CnBrZyBpbnN0YWxsIHVuc3RhYmxlLXJlcG8gLXkgIApwa2cgaW5zdGFsbCBtZXRhc3Bsb2l0IC15CiAgIAozLiBSdW4gTWV0YXNwbG9pdDoKYmFzaAptc2Zjb25zb2xlCiAgIArwn5OMIEJhc2ljIFVzYWdlIChTaW1wbGUgQ29tbWFuZHMpIAoKMS4gU2VhcmNoIGZvciBhbiBleHBsb2l0IChlLmcuLCBmb3IgRXRlcm5hbEJsdWUpOiAgCm1zZgpzZWFyY2ggZXRlcm5hbGJsdWUKCjIuIFVzZSBhbiBleHBsb2l0IG1vZHVsZTogIAptc2YKdXNlIGV4cGxvaXQvd2luZG93cy9zbWIvbXMxN18wMTBfZXRlcm5hbGJsdWUKCjMuIFNldCB0aGUgdGFyZ2V0IChSSE9TVCk6ICAKbXNmCnNldCBSSE9TVCBbVGFyZ2V0LUlQXQoKNC4gUnVuIHRoZSBleHBsb2l0OiAgCm1zZgpleHBsb2l0Cgo1LiBJZiBzdWNjZXNzZnVsLCB5b3XigJlsbCBnZXQgYSBzaGVsbCAoTWV0ZXJwcmV0ZXIgc2Vzc2lvbikuIEJhc2ljIE1ldGVycHJldGVyIGNvbW1hbmRzOiAKLSBgc3lzaW5mb2Ag4oaSIFZpZXcgc3lzdGVtIGluZm8uICAKLSBgc2NyZWVuc2hvdGAg4oaSIFRha2UgYSBzY3JlZW5zaG90LiAgCi0gYHNoZWxsYCDihpIgQWNjZXNzIHRoZSB0YXJnZXTigJlzIGNvbW1hbmQgbGluZS4gIAotIGBleGl0YCDihpIgQ2xvc2UgdGhlIHNlc3Npb24uICAKCuKaoO+4jyBXYXJuaW5nOiAKLSBVc2UgTWV0YXNwbG9pdCBvbmx5IG9uIHN5c3RlbXMgeW91IG93biBvciBoYXZlIHBlcm1pc3Npb24gdG8gdGVzdC4gIAotIFVuYXV0aG9yaXplZCBoYWNraW5nIGlzIGlsbGVnYWwuCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICNqb2huIHRoZSByaXBwZXIKICAgICAgICAgICAgZWxpZiBwaWxpaGFuX3Rvb2wgPT0gMzoKICAgICAgICAgICAgICAgIHByaW50KCJcbkpvaG4gdGhlIHJpcHBlciBtZW51IikKICAgICAgICAgICAgICAgIHByaW50KCJbMV0gSW5zdGFsbGF0aW9uIikKICAgICAgICAgICAgICAgIHByaW50KCJbMl0gSG93IHRvIHVzZT8iKQogICAgICAgICAgICAgICAgcGlsaWhhbl8zID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgIGlmIHBpbGloYW5fMyA9PSAxOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVud2FsbC9qb2huIC1iIGJsZWVkaW5nLWp1bWJvIGpvaG4iKQogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICBlbGlmIHBpbGloYW5fMyA9PSAyOgogICAgICAgICAgICAgICAgICAgIHByaW50KCcnJwrwn5KhIFdoYXQgaXMgSm9obiB0aGUgUmlwcGVyPwpKb2huIHRoZSBSaXBwZXIgaXMgYSBwb3dlcmZ1bCBwYXNzd29yZC1jcmFja2luZyB0b29sIHVzZWQgdG8gcmVjb3ZlciBwYXNzd29yZHMgdGhyb3VnaCBicnV0ZS1mb3JjZSBvciBkaWN0aW9uYXJ5IGF0dGFja3MuIFRoZSBHaXRIdWIgdmVyc2lvbiBpbmNsdWRlcyBleHRyYSBmZWF0dXJlcyBhbmQgc3VwcG9ydCBmb3IgbW9yZSBoYXNoIHR5cGVzLgoK8J+boCBJbnN0YWxsYXRpb24gKEdpdEh1YiBWZXJzaW9uKSAgCjEuIEluc3RhbGwgRGVwZW5kZW5jaWVzKiogKFRlcm11eCk6ICAKcGtnIHVwZGF0ZSAmJiBwa2cgdXBncmFkZSAteQpwa2cgaW5zdGFsbCBnaXQgbWFrZSBjbGFuZyBvcGVuc3NsIHB5dGhvbiAteQoKMi4gQ2xvbmUgJiBDb21waWxlOiAgCmdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vb3BlbndhbGwvam9obiAtYiBibGVlZGluZy1qdW1ibwpjZCBqb2huL3NyYy8KLi9jb25maWd1cmUgJiYgbWFrZSAtajQKKFdhaXQgNS0xNSBtaW5zIGZvciBjb21waWxhdGlvbikKCjMuIFZlcmlmeSBJbnN0YWxsYXRpb246ICAKLi4vcnVuL2pvaG4gLS1oZWxwCgrwn5OMIEJhc2ljIENvbW1hbmRzCgoxLiBDcmFjayBhIE1ENSBIYXNoCmVjaG8gIjVmNGRjYzNiNWFhNzY1ZDYxZDgzMjdkZWI4ODJjZjk5IiA+IGhhc2gudHh0ICAjIEhhc2ggb2YgInBhc3N3b3JkIgouLi9ydW4vam9obiAtLWZvcm1hdD1yYXctbWQ1IGhhc2gudHh0Ci0gYC0tZm9ybWF0PXJhdy1tZDVgID0gU3BlY2lmaWVzIHRoZSBoYXNoIHR5cGUuICAKCjIuIFVzZSBhIFdvcmRsaXN0IChlLmcuLCByb2NreW91LnR4dCkgCi4uL3J1bi9qb2huIC0td29yZGxpc3Q9cm9ja3lvdS50eHQgaGFzaC50eHQKLSBHZXQgYHJvY2t5b3UudHh0YDogIApjcCAvZGF0YS9kYXRhL2NvbS50ZXJtdXgvZmlsZXMvdXNyL3NoYXJlL3dvcmRsaXN0cy9yb2NreW91LnR4dC5neiAuCmd1bnppcCByb2NreW91LnR4dC5negoKMy4gQ3JhY2sgWklQL1JBUiBQYXNzd29yZHMKLi4vcnVuL3ppcDJqb2huIGZpbGUuemlwID4gemlwX2hhc2gudHh0Ci4uL3J1bi9qb2huIHppcF9oYXNoLnR4dAoKNC4gU2hvdyBDcmFja2VkIFBhc3N3b3JkcwouLi9ydW4vam9obiAtLXNob3cgaGFzaC50eHQKCjUuIEJydXRlLUZvcmNlIEF0dGFjayg0LWRpZ2l0IFBJTikgIAouLi9ydW4vam9obiAtLWluY3JlbWVudGFsPWRpZ2l0cyAtLW1pbi1sZW5ndGg9NCAtLW1heC1sZW5ndGg9NCBoYXNoLnR4dAoKIOKaoO+4jyBXYXJuaW5ncyAKLSBMZWdhbCBVc2UgT25seSEgVGVzdCBvbmx5IHBhc3N3b3JkcyB5b3Ugb3duIG9yIGhhdmUgcGVybWlzc2lvbiB0byBjcmFjay4gIAotIFNhdmUgUHJvZ3Jlc3M6IFVzZSBgLS1zZXNzaW9uPW5hbWVgIHRvIHJlc3VtZSBsYXRlci4gIAotIFRlcm11eCBMaW1pdGF0aW9uOiBTbG93ZXIgdGhhbiBQQzsgdXNlIGAtLWZvcms9MmAgZm9yIG11bHRpLWNvcmUuICAKCvCflI0gRXhhbXBsZTogQ3JhY2sgV2lGaSBIYW5kc2hha2UKMS4gQ29udmVydCBgLmNhcGAgdG8gYC5oY2NhcGA6ICAKYWlyY3JhY2stbmcgLUogb3V0cHV0IGNhcHR1cmUuY2FwCgoyLiBDcmFjayB3aXRoIEpvaG46ICAKLi4vcnVuL2pvaG4gLS1mb3JtYXQ9d3BhcHNrIG91dHB1dC5oY2NhcAoKVGhpcyBHaXRIdWIgdmVyc2lvbiBzdXBwb3J0cyAzMDArIGhhc2ggdHlwZXMoZS5nLiwgV2lGaSBXUEEyLCBMaW51eCBzaGFkb3cpLiBGb3IgaGVscDogIAouLi9ydW4vam9obiAtLWxpc3Q9Zm9ybWF0cyAgIyBTZWUgYWxsIHN1cHBvcnRlZCBoYXNoZXMKCkxldCBtZSBrbm93IGlmIHlvdSBuZWVkIGFkanVzdG1lbnRzISDwn5SQCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAjbm1hcAogICAgICAgICAgICBlbGlmIHBpbGloYW5fdG9vbCA9PSAyOgogICAgICAgICAgICAgICAgcHJpbnQoIlxuU3FsbWFwIG1lbnUiKQogICAgICAgICAgICAgICAgcHJpbnQoIlsxXSBJbnN0YWxsYXRpb24iKQogICAgICAgICAgICAgICAgcHJpbnQoIlsyXSBIb3cgdG8gdXNlPyIpCiAgICAgICAgICAgICAgICBwaWxpaGFuXzIgPSBpbnQoaW5wdXQoIklucHV0IG9wdGlvbiA+ICIpKQogICAgICAgICAgICAgICAgaWYgcGlsaWhhbl8yID09IDE6CiAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJwaXAgaW5zdGFsbCBzcWxtYXAiKQogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgic3FsbWFwIC1oaCIpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVsaWYgcGlsaWhhbl8yID09IDI6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJycnClNRTE1hcD8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgClNRTE1hcCBpcyBhIHRvb2wgdG8gdGVzdCBhbmQgZXhwbG9pdCBTUUwgaW5qZWN0aW9uIChTUUxpKSBvbiB3ZWJzaXRlcy4KCvCfm6AgIEJhc2ljIFJlcXVpcmVtZW50cwpCZWZvcmUgdXNpbmcgU1FMTWFwOgpJbnN0YWxsIFB5dGhvbiBhbmQgU1FMTWFwLgpLbm93IGEgVVJMIHRoYXQgbWF5IGJlIHZ1bG5lcmFibGUgdG8gU1FMIGluamVjdGlvbi4KCvCfk4wgQmFzaWMgQ29tbWFuZHMKMS4gVGVzdCBpZiBhIHNpdGUgaXMgdnVsbmVyYWJsZXMKc3FsbWFwIC11ICJodHRwOi8vZXhhbXBsZS5jb20vcGFnZS5waHA/aWQ9MSIKLXUgPSB0aGUgdGFyZ2V0IFVSTC4KCjIuIEZpbmQgYXZhaWxhYmxlIGRhdGFiYXNlcwpzcWxtYXAgLXUgImh0dHA6Ly9leGFtcGxlLmNvbS9wYWdlLnBocD9pZD0xIiAtLWRicwotLWRicyA9IHNob3dzIHRoZSBkYXRhYmFzZXMgb24gdGhlIHNlcnZlci4KCjMuIEZpbmQgdGFibGVzIGluc2lkZSBhIGRhdGFiYXNlCnNxbG1hcCAtdSAiaHR0cDovL2V4YW1wbGUuY29tL3BhZ2UucGhwP2lkPTEiIC1EIHRlc3RkYiAtLXRhYmxlcyAKLUQgPSBjaG9vc2UgdGhlIGRhdGFiYXNlLiAKLS10YWJsZXMgPSBzaG93cyB0aGUgdGFibGVzIGluc2lkZS4KCjQuIEZpbmQgY29sdW1ucyBpbnNpZGUgYSB0YWJsZQpzcWxtYXAgLXUgImh0dHA6Ly9leGFtcGxlLmNvbS9wYWdlLnBocD9pZD0xIiAtRCB0ZXN0ZGIgLVQgdXNlcnMgLS1jb2x1bW5zCi1UID0gY2hvb3NlIHRoZSB0YWJsZS4KLS1jb2x1bW5zID0gc2hvd3MgdGhlIGNvbHVtbnMgKGxpa2UgdXNlcm5hbWUsIHBhc3N3b3JkKS4KCjUuIEdldCBkYXRhIGZyb20gYSB0YWJsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3FsbWFwIC11ICJodHRwOi8vZXhhbXBsZS5jb20vcGFnZS5waHA/aWQ9MSIgLUQgdGVzdGRiIC1UIHVzZXJzIC1DIHVzZXJuYW1lLHBhc3N3b3JkIC0tZHVtICAgICAgcC4KLUMgPSBjaG9vc2Ugc3BlY2lmaWMgY29sdW1ucy4KLS1kdW1wID0gZ2V0IChkdW1wKSB0aGUgZGF0YS4KCuKaoO+4jyAgV2FybmluZzoKVXNlIFNRTE1hcCBvbmx5IG9uIHdlYnNpdGVzIHlvdSBvd24gb3IgaGF2ZSBwZXJtaXNzaW9uIHRvIHRlc3QuClVuYXV0aG9yaXplZCB1c2UgaXMgaWxsZWdhbAonJycpCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAjbm1hcAogICAgICAgICAgICBlbGlmIHBpbGloYW5fdG9vbCA9PSAxOgogICAgICAgICAgICAgICAgcHJpbnQoIlxuTm1hcCBtZW51IikKICAgICAgICAgICAgICAgIHByaW50KCJbMV0gSW5zdGFsbGF0aW9uIikKICAgICAgICAgICAgICAgIHByaW50KCJbMl0gSG93IHRvIHVzZT8iKQogICAgICAgICAgICAgICAgcGlsaWhhbl8xID0gaW50KGlucHV0KCJJbnB1dCBvcHRpb24gPiAiKSkKICAgICAgICAgICAgICAgIGlmIHBpbGloYW5fMSA9PSAxOgogICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgiYXB0IGluc3RhbGwgbm1hcCAteSIpCiAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCJubWFwIC1oIikKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxpZiBwaWxpaGFuXzEgPT0gMjoKICAgICAgICAgICAgICAgICAgICBwcmludCgnJycK8J+UjSBXaGF0IGlzIE5tYXA/CgpObWFwIChOZXR3b3JrIE1hcHBlcikgaXMgYSBmcmVlIHRvb2wgdG8gc2NhbiBhbmQgY2hlY2sgbmV0d29ya3Mgb3IgY29tcHV0ZXJzLiBJdCBoZWxwcyB5b3UgZmluZCB3aGljaCBkZXZpY2VzIGFyZSBvbmxpbmUsIHdoaWNoIHBvcnRzIGFyZSBvcGVuLCBhbmQgd2hhdCBzZXJ2aWNlcyBhcmUgcnVubmluZy4KCvCfm6DvuI8gQmFzaWMgTm1hcCBDb21tYW5kcwoKMS4gU2NhbiBhIHNpbmdsZSBJUApubWFwIDE5Mi4xNjguMS4xCj4gU2NhbiBvbmUgZGV2aWNlIHRvIHNlZSBvcGVuIHBvcnRzLgoKMi4gU2NhbiBhIHJhbmdlIG9mIElQcwpubWFwIDE5Mi4xNjguMS4xLTEwMAo+IFNjYW4gbWFueSBkZXZpY2VzIGluIHRoZSBzYW1lIG5ldHdvcmsuCgozLiBTY2FuIGEgd2hvbGUgc3VibmV0Cm5tYXAgMTkyLjE2OC4xLjAvMjQKPiBTY2FuIGFsbCAyNTYgSVBzIGluIHRoZSBuZXR3b3JrLgoKNC4gRGV0ZWN0IG9wZXJhdGluZyBzeXN0ZW0Kbm1hcCAtTyAxOTIuMTY4LjEuMQo+IFRyeSB0byBndWVzcyB0aGUgT1MgKExpbnV4LCBXaW5kb3dzLCBldGMuKS4KCjUuIFNlcnZpY2UgdmVyc2lvbiBkZXRlY3Rpb24Kbm1hcCAtc1YgMTkyLjE2OC4xLjEKPiBTaG93IHdoYXQgc2VydmljZSBhbmQgdmVyc2lvbiBpcyBydW5uaW5nIChsaWtlIEFwYWNoZSAyLjQuNikuCgo2LiBTY2FuIHNwZWNpZmljIHBvcnRzCm5tYXAgLXAgODAsNDQzIDE5Mi4xNjguMS4xIAo+IE9ubHkgY2hlY2sgcG9ydCA4MCAoSFRUUCkgYW5kIDQ0MyAoSFRUUFMpLgoKNy4gRmFzdCBzY2FuCm5tYXAgLUYgMTkyLjE2OC4xLjEKPiBTY2FuIGNvbW1vbiBwb3J0cyBxdWlja2x5LgoKOC4gQWdncmVzc2l2ZSBzY2FuIApubWFwIC1BIDE5Mi4xNjguMS4xCj4gR2V0IE9TLCBzZXJ2aWNlcywgc2NyaXB0cywgYW5kIG1vcmUgaW5mbyAobm9pc3kpLgoK4pqg77iPIFRpcHMgClVzZSBObWFwIG9ubHkgb24gbmV0d29ya3MgeW91IG93biBvciBoYXZlIHBlcm1pc3Npb24gdG8gc2Nhbi4KU29tZSBzY2FucyBjYW4gYmUgZGV0ZWN0ZWQgYW5kIG1heSBjYXVzZSBhbGVydHMuCicnJykKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgcGlsaWhhbl9kZXZpY2UgPT0gIjIiOgogICAgICAgICAgICBleGl0KCkKICAgICAgICBlbGlmIHBpbGloYW5fZGV2aWNlID09ICIhIjoKICAgICAgICAgICAgcHJpbnQoRm9yZS5ZRUxMT1crImhlbGxvLCB0aGFuayB5b3UgZm9yIHVzaW5nIG15IHNjcmlwdCwgaWYgcG9zc2libGUgZm9sbG93IG15IGdpdGh1YiBiZWNhdXNlIHRoZSBhY2NvdW50IHdpbGwgdXBsb2FkIHB5dGhvbiBzY3JpcHRzIHRoZXJlIGFuZCBJIGhvcGUgaWYgeW91IHJlY29kZSBpdCB5b3UgZG9uJ3QgY2hhbmdlIHRoZSBjcmVhdG9yJ3MgbmFtZSA6KSIrU3R5bGUuUkVTRVRfQUxMKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHBpbGloYW4gPSBpbnB1dChGb3JlLkdSRUVOKyJJbnN0YWxsIHJlcXVpcmVkIGxpYnJhcmllcz8geS9uICIrU3R5bGUuUkVTRVRfQUxMKQogICAgaWYgcGlsaWhhbiA9PSAieSI6CiAgICAgICAgSW5zdGFsYXNpKCkKICAgIFdNKCkKICAgIFdNMigpCiAgICBtZW51KCkK').decode('utf-8'))
